{
    "data": {
        "project": {
            "address": "0x6c84a8f1c29108f47a79964b5fe888d4f4d0de40",
            "contractName": "TransparentUpgradeableProxy",
            "coreIssues": [
                {
                    "issues": [],
                    "scwDescription": "No vulnerable withdrawal functions found",
                    "scwId": "105",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No reentrancy risk found",
                    "scwId": "107",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No locks detected",
                    "scwId": "150",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Verified source code found",
                    "scwId": "185",
                    "scwTitle": null
                },
                {
                    "issues": [
                        {
                            "additionalData": [
                                {
                                    "description": "Not found.",
                                    "title": "Mint max supply"
                                },
                                {
                                    "description": "Not found.",
                                    "title": "Mint Timelock"
                                }
                            ],
                            "data": "{\"max_supply\": \"\", \"timelock\": \"\", \"privileged\": [{\"type\": \"private\", \"value\": \"private\"}]}",
                            "description": "Mint function: L2TBTC.mint(address,uint256) (L2TBTC.sol#242-248)\n\t- in internal call: _mint(account,amount)\n\t\t- In expression: _balances[account] += amount\n",
                            "end": 248,
                            "governanceInfo": {
                                "owners": [
                                    {
                                        "owner": "",
                                        "timelockDelay": null,
                                        "type": "7"
                                    }
                                ],
                                "worstOwner": {
                                    "owner": "",
                                    "timelockDelay": null,
                                    "type": "7"
                                }
                            },
                            "id": 214060413,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function mint(address account, uint256 amount)\n    external\n    whenNotPaused\n    onlyMinter\n    _mint(account, amount);\n}",
                            "start": 242
                        }
                    ],
                    "scwDescription": "A large amount of this token can be minted by a private wallet or contract.",
                    "scwId": "186",
                    "scwTitle": "Mintable"
                },
                {
                    "issues": [],
                    "scwDescription": "Users can always transfer their tokens",
                    "scwId": "189",
                    "scwTitle": null
                },
                {
                    "issues": [
                        {
                            "additionalData": [],
                            "data": "{\"privileged\": [{\"type\": \"event\", \"value\": \"AdminChanged(address,address)\", \"index\": \"1\", \"modifiable\": true}]}",
                            "description": "Proxy upgradeability: TransparentUpgradeableProxy.upgradeToAndCall(address,bytes) (TransparentUpgradeableProxy.sol#102-104)\n",
                            "end": 104,
                            "governanceInfo": {
                                "owners": [
                                    {
                                        "owner": "0x02612d20CC087670a959Bb12cA3c5fd56C8A3DB3",
                                        "timelockDelay": null,
                                        "type": "5"
                                    }
                                ],
                                "worstOwner": {
                                    "owner": "0x02612d20CC087670a959Bb12cA3c5fd56C8A3DB3",
                                    "timelockDelay": null,
                                    "type": "5"
                                }
                            },
                            "id": 214051116,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n    _upgradeToAndCall(newImplementation, data, true);\n}",
                            "start": 102
                        },
                        {
                            "additionalData": [],
                            "data": "{\"privileged\": [{\"type\": \"event\", \"value\": \"AdminChanged(address,address)\", \"index\": \"1\", \"modifiable\": true}]}",
                            "description": "Proxy upgradeability: TransparentUpgradeableProxy.upgradeTo(address) (TransparentUpgradeableProxy.sol#91-93)\n",
                            "end": 93,
                            "governanceInfo": {
                                "owners": [
                                    {
                                        "owner": "0x02612d20CC087670a959Bb12cA3c5fd56C8A3DB3",
                                        "timelockDelay": null,
                                        "type": "5"
                                    }
                                ],
                                "worstOwner": {
                                    "owner": "0x02612d20CC087670a959Bb12cA3c5fd56C8A3DB3",
                                    "timelockDelay": null,
                                    "type": "5"
                                }
                            },
                            "id": 214051117,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function upgradeTo(address newImplementation) external ifAdmin {\n    _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n}",
                            "start": 91
                        }
                    ],
                    "scwDescription": "This contract can be upgraded, changing its functionality.",
                    "scwId": "193",
                    "scwTitle": "Proxy Upgradeability"
                },
                {
                    "issues": [],
                    "scwDescription": "Wallets cannot be blacklisted from transfering the token",
                    "scwId": "208",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No transfer fees found",
                    "scwId": "209",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No transfer limits found",
                    "scwId": "211",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No ERC20 approval vulnerability found",
                    "scwId": "216-a",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Contract owner cannot abuse ERC20 approvals",
                    "scwId": "216-b",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No ERC20 interface errors found",
                    "scwId": "204-a",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No blocking loops found",
                    "scwId": "218",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No centralized balance controls found",
                    "scwId": "220",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No transfer cooldown times found",
                    "scwId": "219",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No approval restrictions found",
                    "scwId": "223",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No external calls detected",
                    "scwId": "210-b",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No airdrop-specific code found",
                    "scwId": "10004",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No vulnerable ownership functions found",
                    "scwId": "230",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No retrievable ownership found",
                    "scwId": "231",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Contract was not deployed recently",
                    "scwId": "10010",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No mixers utilized by contract deployer",
                    "scwId": "10003",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No adjustable maximum supply found",
                    "scwId": "233",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No previous scams by owner's wallet found",
                    "scwId": "10016",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "The contract operates without custom fees, ensuring security and financial integrity",
                    "scwId": "236",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Smart contract lacks a whitelisting feature, reinforcing standard restrictions and access controls, enhancing overall security and integrity",
                    "scwId": "237",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Smart contract's transfer function secure with unchangeable router, no issues, ensuring smooth, secure token transfers",
                    "scwId": "238",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Smart contract safeguarded against native token draining in token transfers/approvals",
                    "scwId": "239",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Smart contract with recent user interactions, active use, and operational functionality, not abandoned",
                    "scwId": "10022",
                    "scwTitle": "Recent Interaction was within 30 Days"
                },
                {
                    "issues": [],
                    "scwDescription": "No instances of native token drainage upon revoking tokens were detected in the contract",
                    "scwId": "10023",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Securely hardcoded Uniswap router ensuring protection against router alterations",
                    "scwId": "241",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Contract with minimal revocations, a positive indicator for stable, secure functionality",
                    "scwId": "10025",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Contract's initializer protected, enhancing security and preventing unintended issues",
                    "scwId": "242",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Smart contract intact, not self-destructed, ensuring continuity and functionality",
                    "scwId": "10026",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Contract's timelock setting aligns with 24 hours or more, enhancing security and reliability",
                    "scwId": "10027",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No suspicious activity has been detected",
                    "scwId": "10028",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "This contract maintains a strict adherence to best practices for price feed usage, ensuring data accuracy and consistency",
                    "scwId": "243",
                    "scwTitle": null
                }
            ],
            "diffs": null,
            "estimatedAnalyzingTime": 0,
            "firstTxBlock": null,
            "firstTxDate": "2023-03-31T11:20:15.000Z",
            "firstTxFrom": "0x123694886dbf5ac94dda07135349534536d14caf",
            "generalIssues": [
                {
                    "issues": [
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "Different versions of Solidity is used:\n\t- Version used: ['^0.8.0', '^0.8.1', '^0.8.17', '^0.8.2']\n\t- ^0.8.0 (OwnableUpgradeable.sol#4)\n\t- ^0.8.2 (Initializable.sol#4)\n\t- ^0.8.0 (PausableUpgradeable.sol#4)\n\t- ^0.8.0 (ERC20Upgradeable.sol#4)\n\t- ^0.8.0 (IERC20Upgradeable.sol#4)\n\t- ^0.8.0 (ERC20BurnableUpgradeable.sol#4)\n\t- ^0.8.0 (IERC20MetadataUpgradeable.sol#4)\n\t- ^0.8.0 (draft-ERC20PermitUpgradeable.sol#4)\n\t- ^0.8.0 (draft-IERC20PermitUpgradeable.sol#4)\n\t- ^0.8.0 (SafeERC20Upgradeable.sol#4)\n\t- ^0.8.0 (IERC721Upgradeable.sol#4)\n\t- ^0.8.1 (AddressUpgradeable.sol#4)\n\t- ^0.8.0 (ContextUpgradeable.sol#4)\n\t- ^0.8.0 (CountersUpgradeable.sol#4)\n\t- ^0.8.0 (StringsUpgradeable.sol#4)\n\t- ^0.8.0 (ECDSAUpgradeable.sol#4)\n\t- ^0.8.0 (EIP712Upgradeable.sol#4)\n\t- ^0.8.0 (IERC165Upgradeable.sol#4)\n\t- ^0.8.0 (MathUpgradeable.sol#4)\n\t- ^0.8.1 (AddressUpgradeable.sol#4)\n\t- ^0.8.0 (ContextUpgradeable.sol#4)\n\t- ^0.8.0 (CountersUpgradeable.sol#4)\n\t- ^0.8.0 (ECDSAUpgradeable.sol#4)\n\t- ^0.8.0 (EIP712Upgradeable.sol#4)\n\t- ^0.8.0 (ERC20BurnableUpgradeable.sol#4)\n\t- ^0.8.0 (ERC20Upgradeable.sol#4)\n\t- ^0.8.0 (IERC165Upgradeable.sol#4)\n\t- ^0.8.0 (IERC20MetadataUpgradeable.sol#4)\n\t- ^0.8.0 (IERC20Upgradeable.sol#4)\n\t- ^0.8.0 (IERC721Upgradeable.sol#4)\n\t- ^0.8.2 (Initializable.sol#4)\n\t- ^0.8.17 (L2TBTC.sol#16)\n\t- ^0.8.0 (MathUpgradeable.sol#4)\n\t- ^0.8.0 (OwnableUpgradeable.sol#4)\n\t- ^0.8.0 (PausableUpgradeable.sol#4)\n\t- ^0.8.0 (SafeERC20Upgradeable.sol#4)\n\t- ^0.8.0 (StringsUpgradeable.sol#4)\n\t- ^0.8.0 (draft-ERC20PermitUpgradeable.sol#4)\n\t- ^0.8.0 (draft-IERC20PermitUpgradeable.sol#4)\n\t- ^0.8.0 (IERC20MetadataUpgradeable.sol#4)\n\t- ^0.8.0 (draft-IERC20PermitUpgradeable.sol#4)\n\t- ^0.8.0 (MathUpgradeable.sol#4)\n\t- ^0.8.2 (Initializable.sol#4)\n\t- ^0.8.1 (AddressUpgradeable.sol#4)\n\t- ^0.8.0 (ContextUpgradeable.sol#4)\n\t- ^0.8.0 (CountersUpgradeable.sol#4)\n\t- ^0.8.0 (StringsUpgradeable.sol#4)\n\t- ^0.8.0 (ECDSAUpgradeable.sol#4)\n\t- ^0.8.0 (EIP712Upgradeable.sol#4)\n\t- ^0.8.0 (IERC165Upgradeable.sol#4)\n\t- ^0.8.0 (MathUpgradeable.sol#4)\n",
                            "end": 4,
                            "governanceInfo": null,
                            "id": 214060395,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "pragma solidity ^0.8.0;",
                            "start": 4
                        }
                    ],
                    "scwDescription": "This contract may not function as expected due to inconsistent solidity compiler versions being specified.",
                    "scwId": "103",
                    "scwTitle": "Floating Pragma"
                },
                {
                    "issues": [],
                    "scwDescription": "No unchecked call responses found",
                    "scwId": "104",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No vulnerable self-destruct functions found",
                    "scwId": "106",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No assertion vulnerabilities found",
                    "scwId": "110",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No old solidity code found",
                    "scwId": "111",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No external delegated calls found",
                    "scwId": "112",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No external call dependency found",
                    "scwId": "113",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No vulnerable authentication calls found",
                    "scwId": "115",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No invalid character typos found",
                    "scwId": "129",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No RTL characters found",
                    "scwId": "130",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No dead code found",
                    "scwId": "135",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No risky data allocation found",
                    "scwId": "138",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No uninitialized state variables found",
                    "scwId": "142",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No uninitialized storage variables found",
                    "scwId": "143",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No vulnerable initialization functions found",
                    "scwId": "144",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No risky data handling found",
                    "scwId": "145",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No number accuracy bug found",
                    "scwId": "146",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No out-of-range number vulnerability found",
                    "scwId": "147",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No map data deletion vulnerabilities found",
                    "scwId": "151",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No tautologies or contradictions found",
                    "scwId": "152",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No faulty true/false values found",
                    "scwId": "153",
                    "scwTitle": null
                },
                {
                    "issues": [
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "MathUpgradeable.mulDiv(uint256,uint256,uint256) (MathUpgradeable.sol#55-135) performs a multiplication on the result of a division:\n\t-denominator = denominator / twos (MathUpgradeable.sol#102)\n\t-inverse = (3 * denominator) ^ 2 (MathUpgradeable.sol#117)\n",
                            "end": 135,
                            "governanceInfo": null,
                            "id": 214060396,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function mulDiv(\n    uint256 x,\n    uint256 y,\n    uint256 denominator\n) internal pure returns (uint256 result) {\n    unchecked {\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2^256 + prod0.\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n        // Handle non-overflow cases, 256 by 256 division.\n        if (prod1 == 0) {\n            return prod0 / denominator;\n        }\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\n        require(denominator > prod1);\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n        // Make division exact by subtracting the remainder from [prod1 prod0].\n        uint256 remainder;\n        assembly {\n            // Compute remainder using mulmod.\n            remainder := mulmod(x, y, denominator)\n            // Subtract 256 bit number from 512 bit number.\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n        // See https://cs.stackexchange.com/q/138556/92363.\n        // Does not overflow because the denominator cannot be zero at this stage in the function.\n        uint256 twos = denominator & (~denominator + 1);\n        assembly {\n            // Divide denominator by twos.\n            denominator := div(denominator, twos)\n            // Divide [prod1 prod0] by twos.\n            prod0 := div(prod0, twos)\n            // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        // Shift in bits from prod1 into prod0.\n        prod0 |= prod1 * twos;\n        // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n        // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n        // four bits. That is, denominator * inv = 1 mod 2^4.\n        uint256 inverse = (3 * denominator) ^ 2;\n        // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n        // in modular arithmetic, doubling the correct bits in each step.\n        inverse *= 2 - denominator * inverse; // inverse mod 2^8\n        inverse *= 2 - denominator * inverse; // inverse mod 2^16\n        inverse *= 2 - denominator * inverse; // inverse mod 2^32\n        inverse *= 2 - denominator * inverse; // inverse mod 2^64\n        inverse *= 2 - denominator * inverse; // inverse mod 2^128\n        inverse *= 2 - denominator * inverse; // inverse mod 2^256\n        // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n        // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n        // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n        // is no longer required.\n        result = prod0 * inverse;\n        return result;\n    }\n}",
                            "start": 55
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "MathUpgradeable.mulDiv(uint256,uint256,uint256) (MathUpgradeable.sol#55-135) performs a multiplication on the result of a division:\n\t-denominator = denominator / twos (MathUpgradeable.sol#102)\n\t-inverse *= 2 - denominator * inverse (MathUpgradeable.sol#121)\n",
                            "end": 135,
                            "governanceInfo": null,
                            "id": 214060397,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function mulDiv(\n    uint256 x,\n    uint256 y,\n    uint256 denominator\n) internal pure returns (uint256 result) {\n    unchecked {\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2^256 + prod0.\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n        // Handle non-overflow cases, 256 by 256 division.\n        if (prod1 == 0) {\n            return prod0 / denominator;\n        }\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\n        require(denominator > prod1);\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n        // Make division exact by subtracting the remainder from [prod1 prod0].\n        uint256 remainder;\n        assembly {\n            // Compute remainder using mulmod.\n            remainder := mulmod(x, y, denominator)\n            // Subtract 256 bit number from 512 bit number.\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n        // See https://cs.stackexchange.com/q/138556/92363.\n        // Does not overflow because the denominator cannot be zero at this stage in the function.\n        uint256 twos = denominator & (~denominator + 1);\n        assembly {\n            // Divide denominator by twos.\n            denominator := div(denominator, twos)\n            // Divide [prod1 prod0] by twos.\n            prod0 := div(prod0, twos)\n            // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        // Shift in bits from prod1 into prod0.\n        prod0 |= prod1 * twos;\n        // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n        // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n        // four bits. That is, denominator * inv = 1 mod 2^4.\n        uint256 inverse = (3 * denominator) ^ 2;\n        // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n        // in modular arithmetic, doubling the correct bits in each step.\n        inverse *= 2 - denominator * inverse; // inverse mod 2^8\n        inverse *= 2 - denominator * inverse; // inverse mod 2^16\n        inverse *= 2 - denominator * inverse; // inverse mod 2^32\n        inverse *= 2 - denominator * inverse; // inverse mod 2^64\n        inverse *= 2 - denominator * inverse; // inverse mod 2^128\n        inverse *= 2 - denominator * inverse; // inverse mod 2^256\n        // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n        // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n        // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n        // is no longer required.\n        result = prod0 * inverse;\n        return result;\n    }\n}",
                            "start": 55
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "MathUpgradeable.mulDiv(uint256,uint256,uint256) (MathUpgradeable.sol#55-135) performs a multiplication on the result of a division:\n\t-denominator = denominator / twos (MathUpgradeable.sol#102)\n\t-inverse *= 2 - denominator * inverse (MathUpgradeable.sol#122)\n",
                            "end": 135,
                            "governanceInfo": null,
                            "id": 214060398,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function mulDiv(\n    uint256 x,\n    uint256 y,\n    uint256 denominator\n) internal pure returns (uint256 result) {\n    unchecked {\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2^256 + prod0.\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n        // Handle non-overflow cases, 256 by 256 division.\n        if (prod1 == 0) {\n            return prod0 / denominator;\n        }\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\n        require(denominator > prod1);\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n        // Make division exact by subtracting the remainder from [prod1 prod0].\n        uint256 remainder;\n        assembly {\n            // Compute remainder using mulmod.\n            remainder := mulmod(x, y, denominator)\n            // Subtract 256 bit number from 512 bit number.\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n        // See https://cs.stackexchange.com/q/138556/92363.\n        // Does not overflow because the denominator cannot be zero at this stage in the function.\n        uint256 twos = denominator & (~denominator + 1);\n        assembly {\n            // Divide denominator by twos.\n            denominator := div(denominator, twos)\n            // Divide [prod1 prod0] by twos.\n            prod0 := div(prod0, twos)\n            // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        // Shift in bits from prod1 into prod0.\n        prod0 |= prod1 * twos;\n        // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n        // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n        // four bits. That is, denominator * inv = 1 mod 2^4.\n        uint256 inverse = (3 * denominator) ^ 2;\n        // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n        // in modular arithmetic, doubling the correct bits in each step.\n        inverse *= 2 - denominator * inverse; // inverse mod 2^8\n        inverse *= 2 - denominator * inverse; // inverse mod 2^16\n        inverse *= 2 - denominator * inverse; // inverse mod 2^32\n        inverse *= 2 - denominator * inverse; // inverse mod 2^64\n        inverse *= 2 - denominator * inverse; // inverse mod 2^128\n        inverse *= 2 - denominator * inverse; // inverse mod 2^256\n        // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n        // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n        // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n        // is no longer required.\n        result = prod0 * inverse;\n        return result;\n    }\n}",
                            "start": 55
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "MathUpgradeable.mulDiv(uint256,uint256,uint256) (MathUpgradeable.sol#55-135) performs a multiplication on the result of a division:\n\t-denominator = denominator / twos (MathUpgradeable.sol#102)\n\t-inverse *= 2 - denominator * inverse (MathUpgradeable.sol#123)\n",
                            "end": 135,
                            "governanceInfo": null,
                            "id": 214060399,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function mulDiv(\n    uint256 x,\n    uint256 y,\n    uint256 denominator\n) internal pure returns (uint256 result) {\n    unchecked {\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2^256 + prod0.\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n        // Handle non-overflow cases, 256 by 256 division.\n        if (prod1 == 0) {\n            return prod0 / denominator;\n        }\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\n        require(denominator > prod1);\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n        // Make division exact by subtracting the remainder from [prod1 prod0].\n        uint256 remainder;\n        assembly {\n            // Compute remainder using mulmod.\n            remainder := mulmod(x, y, denominator)\n            // Subtract 256 bit number from 512 bit number.\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n        // See https://cs.stackexchange.com/q/138556/92363.\n        // Does not overflow because the denominator cannot be zero at this stage in the function.\n        uint256 twos = denominator & (~denominator + 1);\n        assembly {\n            // Divide denominator by twos.\n            denominator := div(denominator, twos)\n            // Divide [prod1 prod0] by twos.\n            prod0 := div(prod0, twos)\n            // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        // Shift in bits from prod1 into prod0.\n        prod0 |= prod1 * twos;\n        // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n        // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n        // four bits. That is, denominator * inv = 1 mod 2^4.\n        uint256 inverse = (3 * denominator) ^ 2;\n        // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n        // in modular arithmetic, doubling the correct bits in each step.\n        inverse *= 2 - denominator * inverse; // inverse mod 2^8\n        inverse *= 2 - denominator * inverse; // inverse mod 2^16\n        inverse *= 2 - denominator * inverse; // inverse mod 2^32\n        inverse *= 2 - denominator * inverse; // inverse mod 2^64\n        inverse *= 2 - denominator * inverse; // inverse mod 2^128\n        inverse *= 2 - denominator * inverse; // inverse mod 2^256\n        // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n        // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n        // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n        // is no longer required.\n        result = prod0 * inverse;\n        return result;\n    }\n}",
                            "start": 55
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "MathUpgradeable.mulDiv(uint256,uint256,uint256) (MathUpgradeable.sol#55-135) performs a multiplication on the result of a division:\n\t-denominator = denominator / twos (MathUpgradeable.sol#102)\n\t-inverse *= 2 - denominator * inverse (MathUpgradeable.sol#124)\n",
                            "end": 135,
                            "governanceInfo": null,
                            "id": 214060400,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function mulDiv(\n    uint256 x,\n    uint256 y,\n    uint256 denominator\n) internal pure returns (uint256 result) {\n    unchecked {\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2^256 + prod0.\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n        // Handle non-overflow cases, 256 by 256 division.\n        if (prod1 == 0) {\n            return prod0 / denominator;\n        }\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\n        require(denominator > prod1);\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n        // Make division exact by subtracting the remainder from [prod1 prod0].\n        uint256 remainder;\n        assembly {\n            // Compute remainder using mulmod.\n            remainder := mulmod(x, y, denominator)\n            // Subtract 256 bit number from 512 bit number.\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n        // See https://cs.stackexchange.com/q/138556/92363.\n        // Does not overflow because the denominator cannot be zero at this stage in the function.\n        uint256 twos = denominator & (~denominator + 1);\n        assembly {\n            // Divide denominator by twos.\n            denominator := div(denominator, twos)\n            // Divide [prod1 prod0] by twos.\n            prod0 := div(prod0, twos)\n            // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        // Shift in bits from prod1 into prod0.\n        prod0 |= prod1 * twos;\n        // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n        // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n        // four bits. That is, denominator * inv = 1 mod 2^4.\n        uint256 inverse = (3 * denominator) ^ 2;\n        // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n        // in modular arithmetic, doubling the correct bits in each step.\n        inverse *= 2 - denominator * inverse; // inverse mod 2^8\n        inverse *= 2 - denominator * inverse; // inverse mod 2^16\n        inverse *= 2 - denominator * inverse; // inverse mod 2^32\n        inverse *= 2 - denominator * inverse; // inverse mod 2^64\n        inverse *= 2 - denominator * inverse; // inverse mod 2^128\n        inverse *= 2 - denominator * inverse; // inverse mod 2^256\n        // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n        // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n        // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n        // is no longer required.\n        result = prod0 * inverse;\n        return result;\n    }\n}",
                            "start": 55
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "MathUpgradeable.mulDiv(uint256,uint256,uint256) (MathUpgradeable.sol#55-135) performs a multiplication on the result of a division:\n\t-denominator = denominator / twos (MathUpgradeable.sol#102)\n\t-inverse *= 2 - denominator * inverse (MathUpgradeable.sol#125)\n",
                            "end": 135,
                            "governanceInfo": null,
                            "id": 214060401,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function mulDiv(\n    uint256 x,\n    uint256 y,\n    uint256 denominator\n) internal pure returns (uint256 result) {\n    unchecked {\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2^256 + prod0.\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n        // Handle non-overflow cases, 256 by 256 division.\n        if (prod1 == 0) {\n            return prod0 / denominator;\n        }\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\n        require(denominator > prod1);\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n        // Make division exact by subtracting the remainder from [prod1 prod0].\n        uint256 remainder;\n        assembly {\n            // Compute remainder using mulmod.\n            remainder := mulmod(x, y, denominator)\n            // Subtract 256 bit number from 512 bit number.\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n        // See https://cs.stackexchange.com/q/138556/92363.\n        // Does not overflow because the denominator cannot be zero at this stage in the function.\n        uint256 twos = denominator & (~denominator + 1);\n        assembly {\n            // Divide denominator by twos.\n            denominator := div(denominator, twos)\n            // Divide [prod1 prod0] by twos.\n            prod0 := div(prod0, twos)\n            // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        // Shift in bits from prod1 into prod0.\n        prod0 |= prod1 * twos;\n        // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n        // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n        // four bits. That is, denominator * inv = 1 mod 2^4.\n        uint256 inverse = (3 * denominator) ^ 2;\n        // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n        // in modular arithmetic, doubling the correct bits in each step.\n        inverse *= 2 - denominator * inverse; // inverse mod 2^8\n        inverse *= 2 - denominator * inverse; // inverse mod 2^16\n        inverse *= 2 - denominator * inverse; // inverse mod 2^32\n        inverse *= 2 - denominator * inverse; // inverse mod 2^64\n        inverse *= 2 - denominator * inverse; // inverse mod 2^128\n        inverse *= 2 - denominator * inverse; // inverse mod 2^256\n        // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n        // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n        // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n        // is no longer required.\n        result = prod0 * inverse;\n        return result;\n    }\n}",
                            "start": 55
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "MathUpgradeable.mulDiv(uint256,uint256,uint256) (MathUpgradeable.sol#55-135) performs a multiplication on the result of a division:\n\t-denominator = denominator / twos (MathUpgradeable.sol#102)\n\t-inverse *= 2 - denominator * inverse (MathUpgradeable.sol#126)\n",
                            "end": 135,
                            "governanceInfo": null,
                            "id": 214060402,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function mulDiv(\n    uint256 x,\n    uint256 y,\n    uint256 denominator\n) internal pure returns (uint256 result) {\n    unchecked {\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2^256 + prod0.\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n        // Handle non-overflow cases, 256 by 256 division.\n        if (prod1 == 0) {\n            return prod0 / denominator;\n        }\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\n        require(denominator > prod1);\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n        // Make division exact by subtracting the remainder from [prod1 prod0].\n        uint256 remainder;\n        assembly {\n            // Compute remainder using mulmod.\n            remainder := mulmod(x, y, denominator)\n            // Subtract 256 bit number from 512 bit number.\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n        // See https://cs.stackexchange.com/q/138556/92363.\n        // Does not overflow because the denominator cannot be zero at this stage in the function.\n        uint256 twos = denominator & (~denominator + 1);\n        assembly {\n            // Divide denominator by twos.\n            denominator := div(denominator, twos)\n            // Divide [prod1 prod0] by twos.\n            prod0 := div(prod0, twos)\n            // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        // Shift in bits from prod1 into prod0.\n        prod0 |= prod1 * twos;\n        // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n        // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n        // four bits. That is, denominator * inv = 1 mod 2^4.\n        uint256 inverse = (3 * denominator) ^ 2;\n        // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n        // in modular arithmetic, doubling the correct bits in each step.\n        inverse *= 2 - denominator * inverse; // inverse mod 2^8\n        inverse *= 2 - denominator * inverse; // inverse mod 2^16\n        inverse *= 2 - denominator * inverse; // inverse mod 2^32\n        inverse *= 2 - denominator * inverse; // inverse mod 2^64\n        inverse *= 2 - denominator * inverse; // inverse mod 2^128\n        inverse *= 2 - denominator * inverse; // inverse mod 2^256\n        // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n        // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n        // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n        // is no longer required.\n        result = prod0 * inverse;\n        return result;\n    }\n}",
                            "start": 55
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "MathUpgradeable.mulDiv(uint256,uint256,uint256) (MathUpgradeable.sol#55-135) performs a multiplication on the result of a division:\n\t-prod0 = prod0 / twos (MathUpgradeable.sol#105)\n\t-result = prod0 * inverse (MathUpgradeable.sol#132)\n",
                            "end": 135,
                            "governanceInfo": null,
                            "id": 214060403,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function mulDiv(\n    uint256 x,\n    uint256 y,\n    uint256 denominator\n) internal pure returns (uint256 result) {\n    unchecked {\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2^256 + prod0.\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n        // Handle non-overflow cases, 256 by 256 division.\n        if (prod1 == 0) {\n            return prod0 / denominator;\n        }\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\n        require(denominator > prod1);\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n        // Make division exact by subtracting the remainder from [prod1 prod0].\n        uint256 remainder;\n        assembly {\n            // Compute remainder using mulmod.\n            remainder := mulmod(x, y, denominator)\n            // Subtract 256 bit number from 512 bit number.\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n        // See https://cs.stackexchange.com/q/138556/92363.\n        // Does not overflow because the denominator cannot be zero at this stage in the function.\n        uint256 twos = denominator & (~denominator + 1);\n        assembly {\n            // Divide denominator by twos.\n            denominator := div(denominator, twos)\n            // Divide [prod1 prod0] by twos.\n            prod0 := div(prod0, twos)\n            // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        // Shift in bits from prod1 into prod0.\n        prod0 |= prod1 * twos;\n        // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n        // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n        // four bits. That is, denominator * inv = 1 mod 2^4.\n        uint256 inverse = (3 * denominator) ^ 2;\n        // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n        // in modular arithmetic, doubling the correct bits in each step.\n        inverse *= 2 - denominator * inverse; // inverse mod 2^8\n        inverse *= 2 - denominator * inverse; // inverse mod 2^16\n        inverse *= 2 - denominator * inverse; // inverse mod 2^32\n        inverse *= 2 - denominator * inverse; // inverse mod 2^64\n        inverse *= 2 - denominator * inverse; // inverse mod 2^128\n        inverse *= 2 - denominator * inverse; // inverse mod 2^256\n        // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n        // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n        // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n        // is no longer required.\n        result = prod0 * inverse;\n        return result;\n    }\n}",
                            "start": 55
                        }
                    ],
                    "scwDescription": "The order of operations used may result in a loss of precision.",
                    "scwId": "156",
                    "scwTitle": "Division Before Multiplication"
                },
                {
                    "issues": [],
                    "scwDescription": "No redundant constructor calls found",
                    "scwId": "157",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No vulnerable transfers found",
                    "scwId": "158",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No vulnerable return values found",
                    "scwId": "159",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No uninitialized local variables found",
                    "scwId": "160",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No default function responses found",
                    "scwId": "161",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No missing arithmetic events found",
                    "scwId": "167-a",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No missing access control events found",
                    "scwId": "167-b",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No missing zero address checks found",
                    "scwId": "168",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No redundant true/false comparisons found",
                    "scwId": "170",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No state variables vulnerable through function calls found",
                    "scwId": "172",
                    "scwTitle": null
                },
                {
                    "issues": [
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "Low level call in AddressUpgradeable.sendValue(address,uint256) (AddressUpgradeable.sol#60-65):\n\t- (success) = recipient.call{value: amount}() (AddressUpgradeable.sol#63)\n",
                            "end": 65,
                            "governanceInfo": null,
                            "id": 214060409,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function sendValue(address payable recipient, uint256 amount) internal {\n    require(address(this).balance >= amount, \"Address: insufficient balance\");\n    (bool success, ) = recipient.call{value: amount}(\"\");\n    require(success, \"Address: unable to send value, recipient may have reverted\");\n}",
                            "start": 60
                        },
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "Low level call in AddressUpgradeable.functionCallWithValue(address,bytes,uint256,string) (AddressUpgradeable.sol#128-137):\n\t- (success,returndata) = target.call{value: value}(data) (AddressUpgradeable.sol#135)\n",
                            "end": 137,
                            "governanceInfo": null,
                            "id": 214060410,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function functionCallWithValue(\n    address target,\n    bytes memory data,\n    uint256 value,\n    string memory errorMessage\n) internal returns (bytes memory) {\n    require(address(this).balance >= value, \"Address: insufficient balance for call\");\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n}",
                            "start": 128
                        },
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "Low level call in AddressUpgradeable.functionStaticCall(address,bytes,string) (AddressUpgradeable.sol#155-162):\n\t- (success,returndata) = target.staticcall(data) (AddressUpgradeable.sol#160)\n",
                            "end": 162,
                            "governanceInfo": null,
                            "id": 214060411,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function functionStaticCall(\n    address target,\n    bytes memory data,\n    string memory errorMessage\n) internal view returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.staticcall(data);\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n}",
                            "start": 155
                        }
                    ],
                    "scwDescription": "This contract uses low level calls, which may be unsafe.",
                    "scwId": "173",
                    "scwTitle": "Low Level Calls"
                },
                {
                    "issues": [
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "Pragma version^0.8.0 (OwnableUpgradeable.sol#4) allows old versions\n",
                            "end": 4,
                            "governanceInfo": null,
                            "id": 214060404,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "pragma solidity ^0.8.0;",
                            "start": 4
                        },
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "Pragma version^0.8.2 (Initializable.sol#4) allows old versions\n",
                            "end": 4,
                            "governanceInfo": null,
                            "id": 214060405,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "pragma solidity ^0.8.2;",
                            "start": 4
                        },
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "Pragma version^0.8.1 (AddressUpgradeable.sol#4) allows old versions\n",
                            "end": 4,
                            "governanceInfo": null,
                            "id": 214060406,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "pragma solidity ^0.8.1;",
                            "start": 4
                        },
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "Pragma version^0.8.17 (L2TBTC.sol#16) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7\n",
                            "end": 16,
                            "governanceInfo": null,
                            "id": 214060407,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "pragma solidity ^0.8.17;",
                            "start": 16
                        },
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "solc-0.8.17 is not recommended for deployment\n",
                            "end": 0,
                            "governanceInfo": null,
                            "id": 214060408,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "",
                            "start": 0
                        }
                    ],
                    "scwDescription": "This contract uses an unconventional or very old version of Solidity.",
                    "scwId": "177",
                    "scwTitle": "Incorrect Solidity Version"
                },
                {
                    "issues": [],
                    "scwDescription": "No expensive loops found",
                    "scwId": "179",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No bad numeric notation practices found",
                    "scwId": "182",
                    "scwTitle": null
                },
                {
                    "issues": [
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "ERC20PermitUpgradeable._PERMIT_TYPEHASH_DEPRECATED_SLOT (draft-ERC20PermitUpgradeable.sol#40) should be constant\n",
                            "end": 40,
                            "governanceInfo": null,
                            "id": 214060394,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;",
                            "start": 40
                        }
                    ],
                    "scwDescription": "Some state variables in this contract should be declared as constant.",
                    "scwId": "183",
                    "scwTitle": "State Variables Should be Declared Constant"
                },
                {
                    "issues": [],
                    "scwDescription": "No missing external function declarations found",
                    "scwId": "184",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No vulnerable payable functions found",
                    "scwId": "224",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No vulnerable message values found",
                    "scwId": "225",
                    "scwTitle": null
                }
            ],
            "governance": {
                "contractOwners": [
                    {
                        "governance": null,
                        "impact": "Medium",
                        "modifiable": true,
                        "multisig": {
                            "multisigOwners": [
                                "0x2844a0d6442034D3027A05635F4224d966C54fD7",
                                "0xFe45baf0F18c207152A807c1b05926583CFE2e4b",
                                "0x739730cCb2a34cc83D3e30645002C52bA4B06167",
                                "0xe989805835093e37E6b12dCddF718e0481024573",
                                "0x535aB354fA5a8247d45b28502Cc751427f9C7896",
                                "0x12107242e2FbEd0a503e102751fa6Aa8cB7446eC",
                                "0xcE3778528fC73D46685069D455bbCcE16A6e22Af",
                                "0x35B46702C5d1CD36194217Fb92F72B563eFf851A",
                                "0x8d855ac1c48C953D78B678dcc9b346C59a54DCC9"
                            ],
                            "threshold": 6,
                            "transactionCount": 8
                        },
                        "owner": "0x9f6e831c8f8939dc0c830c6e492e7cef4f9c2f5f",
                        "timelock": null,
                        "timelockDelay": null,
                        "type": "2"
                    }
                ],
                "issueOwners": [
                    {
                        "owners": [
                            {
                                "governance": null,
                                "impact": "High",
                                "modifiable": false,
                                "multisig": null,
                                "owner": "",
                                "timelock": null,
                                "timelockDelay": null,
                                "type": "7"
                            }
                        ],
                        "scwId": "186"
                    }
                ],
                "proxyOwners": [
                    {
                        "governance": null,
                        "impact": "High",
                        "modifiable": true,
                        "multisig": null,
                        "owner": "0x02612d20CC087670a959Bb12cA3c5fd56C8A3DB3",
                        "timelock": null,
                        "timelockDelay": null,
                        "type": "5"
                    }
                ],
                "visibleOwner": "0x9f6e831c8f8939dc0c830c6e492e7cef4f9c2f5f"
            },
            "inProgress": false,
            "initialFunder": "0x234794886dbf5ac94dda07135349534536d15dc0",
            "isProxyImplementation": false,
            "logo": "",
            "name": "TransparentUpgradeableProxy",
            "network": 42161,
            "pairInfo": null,
            "projectFullName": "",
            "projectName": "",
            "protocol": "erc20",
            "proxyContractAddress": null,
            "proxyData": {
                "implementationData": {
                    "firstTxBlock": null,
                    "firstTxDate": "2023-03-31T11:20:06.000Z",
                    "firstTxFrom": "0x123694886dbf5ac94dda07135349534536d14caf",
                    "initialFunder": "0x234794886dbf5ac94dda07135349534536d15dc0",
                    "initialFunding": 0.015,
                    "name": "L2TBTC"
                },
                "proxyIssues": [
                    {
                        "issues": [],
                        "scwDescription": "No reentrancy risk found",
                        "scwId": "107",
                        "scwTitle": null
                    },
                    {
                        "issues": [],
                        "scwDescription": "No locks detected",
                        "scwId": "150",
                        "scwTitle": null
                    },
                    {
                        "issues": [],
                        "scwDescription": "Verified source code found",
                        "scwId": "185",
                        "scwTitle": null
                    },
                    {
                        "issues": [],
                        "scwDescription": "Users can always transfer their tokens",
                        "scwId": "189",
                        "scwTitle": null
                    },
                    {
                        "issues": [],
                        "scwDescription": "Wallets cannot be blacklisted from transfering the token",
                        "scwId": "208",
                        "scwTitle": null
                    },
                    {
                        "issues": [],
                        "scwDescription": "No ERC20 approval vulnerability found",
                        "scwId": "216-a",
                        "scwTitle": null
                    },
                    {
                        "issues": [],
                        "scwDescription": "Contract owner cannot abuse ERC20 approvals",
                        "scwId": "216-b",
                        "scwTitle": null
                    }
                ],
                "proxyOwner": "0x02612d20CC087670a959Bb12cA3c5fd56C8A3DB3",
                "sourceCodeLink": "https://scan-results.de.fi/0x6c84a8f1c29108f47a79964b5fe888d4f4d0de40_42161_src.json"
            },
            "rektLink": null,
            "sourceCodeLink": "https://scan-results.de.fi/0xDa534b567099Ca481384133bC121D5843F681365_42161_src.json",
            "stats": {
                "percentage": 99,
                "scammed": false
            },
            "whitelisted": false
        }
    }
}