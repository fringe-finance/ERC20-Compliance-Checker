{
    "data": {
        "project": {
            "address": "0x088cd8f5ef3652623c22d48b1605dcfe860cd704",
            "contractName": "VelaToken",
            "coreIssues": [
                {
                    "issues": [],
                    "scwDescription": "No vulnerable withdrawal functions found",
                    "scwId": "105",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No reentrancy risk found",
                    "scwId": "107",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No locks detected",
                    "scwId": "150",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Verified source code found",
                    "scwId": "185",
                    "scwTitle": null
                },
                {
                    "issues": [
                        {
                            "additionalData": [
                                {
                                    "description": "Not Found.",
                                    "title": "Inflation rate"
                                },
                                {
                                    "description": "Max supply couldnt be defined.",
                                    "title": "Mint max supply"
                                },
                                {
                                    "description": "Not found.",
                                    "title": "Mint Timelock"
                                }
                            ],
                            "data": "{\"max_supply\": {\"type\": \"const\", \"value\": \"1000000000\"}, \"timelock\": \"\", \"privileged\": [{\"type\": \"role\", \"value\": \"MINTER_ROLE\", \"modifiable\": true}]}",
                            "description": "Mint function: VelaToken.mint(address,uint256) (VelaToken.sol#822-825)\n\t- in internal call: _mint(to,amount)\n\t\t- In expression: _balances[account] += amount\n",
                            "end": 825,
                            "governanceInfo": {
                                "owners": [
                                    {
                                        "owner": "0xce59E626F25440dF32778802312A1231ae5a453E",
                                        "timelockDelay": null,
                                        "type": "6"
                                    }
                                ],
                                "worstOwner": {
                                    "owner": "0xce59E626F25440dF32778802312A1231ae5a453E",
                                    "timelockDelay": null,
                                    "type": "6"
                                }
                            },
                            "id": 214027536,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function mint(address to, uint256 amount) public onlyRole(MINTER_ROLE) {\n    require(totalSupply() + amount <= _maxSupply, \"Cannot mint more tokens, cap exceeded\");\n    _mint(to, amount);\n}",
                            "start": 822
                        }
                    ],
                    "scwDescription": "A large amount of this token can be minted by a private wallet or contract.",
                    "scwId": "186",
                    "scwTitle": "Mintable"
                },
                {
                    "issues": [
                        {
                            "additionalData": [],
                            "data": "{\"privileged\": [{\"type\": \"role\", \"value\": \"PAUSER_ROLE\", \"modifiable\": true}]}",
                            "description": "Pausable function: ERC20.transfer(address,uint256) (VelaToken.sol#650-654)\n\t- in internal call:_transfer\n",
                            "end": 654,
                            "governanceInfo": {
                                "owners": [
                                    {
                                        "owner": "0xce59E626F25440dF32778802312A1231ae5a453E",
                                        "timelockDelay": null,
                                        "type": "6"
                                    }
                                ],
                                "worstOwner": {
                                    "owner": "0xce59E626F25440dF32778802312A1231ae5a453E",
                                    "timelockDelay": null,
                                    "type": "6"
                                }
                            },
                            "id": 214027537,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function transfer(address to, uint256 amount) public virtual override returns (bool) {\naddress owner = _msgSender();\n_transfer(owner, to, amount);\nreturn true;",
                            "start": 650
                        },
                        {
                            "additionalData": [],
                            "data": "{\"privileged\": [{\"type\": \"role\", \"value\": \"PAUSER_ROLE\", \"modifiable\": true}]}",
                            "description": "Pausable function: ERC20.transferFrom(address,address,uint256) (VelaToken.sol#666-675)\n\t- in internal call:_transfer\n",
                            "end": 675,
                            "governanceInfo": {
                                "owners": [
                                    {
                                        "owner": "0xce59E626F25440dF32778802312A1231ae5a453E",
                                        "timelockDelay": null,
                                        "type": "6"
                                    }
                                ],
                                "worstOwner": {
                                    "owner": "0xce59E626F25440dF32778802312A1231ae5a453E",
                                    "timelockDelay": null,
                                    "type": "6"
                                }
                            },
                            "id": 214027538,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "    function transferFrom(\n    address from,\n    address to,\n    uint256 amount\n) public virtual override returns (bool) {\n    address spender = _msgSender();\n    _spendAllowance(from, spender, amount);\n    _transfer(from, to, amount);\n    return true;",
                            "start": 666
                        }
                    ],
                    "scwDescription": "Token transfers can be paused, preventing swapping or selling.",
                    "scwId": "189",
                    "scwTitle": "Pausable"
                },
                {
                    "issues": [],
                    "scwDescription": "Contract cannot be upgraded",
                    "scwId": "193",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Wallets cannot be blacklisted from transfering the token",
                    "scwId": "208",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No transfer fees found",
                    "scwId": "209",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No transfer limits found",
                    "scwId": "211",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No ERC20 approval vulnerability found",
                    "scwId": "216-a",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Contract owner cannot abuse ERC20 approvals",
                    "scwId": "216-b",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No ERC20 interface errors found",
                    "scwId": "204-a",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No blocking loops found",
                    "scwId": "218",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No centralized balance controls found",
                    "scwId": "220",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No transfer cooldown times found",
                    "scwId": "219",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No approval restrictions found",
                    "scwId": "223",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No external calls detected",
                    "scwId": "210-b",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No airdrop-specific code found",
                    "scwId": "10004",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No vulnerable ownership functions found",
                    "scwId": "230",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No retrievable ownership found",
                    "scwId": "231",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Contract was not deployed recently",
                    "scwId": "10010",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No mixers utilized by contract deployer",
                    "scwId": "10003",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No adjustable maximum supply found",
                    "scwId": "233",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No previous scams by owner's wallet found",
                    "scwId": "10016",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "The contract operates without custom fees, ensuring security and financial integrity",
                    "scwId": "236",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Smart contract lacks a whitelisting feature, reinforcing standard restrictions and access controls, enhancing overall security and integrity",
                    "scwId": "237",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Smart contract's transfer function secure with unchangeable router, no issues, ensuring smooth, secure token transfers",
                    "scwId": "238",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Smart contract safeguarded against native token draining in token transfers/approvals",
                    "scwId": "239",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Smart contract with recent user interactions, active use, and operational functionality, not abandoned",
                    "scwId": "10022",
                    "scwTitle": "Recent Interaction was within 30 Days"
                },
                {
                    "issues": [],
                    "scwDescription": "No instances of native token drainage upon revoking tokens were detected in the contract",
                    "scwId": "10023",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Securely hardcoded Uniswap router ensuring protection against router alterations",
                    "scwId": "241",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Contract with minimal revocations, a positive indicator for stable, secure functionality",
                    "scwId": "10025",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Contract's initializer protected, enhancing security and preventing unintended issues",
                    "scwId": "242",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Smart contract intact, not self-destructed, ensuring continuity and functionality",
                    "scwId": "10026",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Contract's timelock setting aligns with 24 hours or more, enhancing security and reliability",
                    "scwId": "10027",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No suspicious activity has been detected",
                    "scwId": "10028",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "This contract maintains a strict adherence to best practices for price feed usage, ensuring data accuracy and consistency",
                    "scwId": "243",
                    "scwTitle": null
                }
            ],
            "diffs": null,
            "estimatedAnalyzingTime": 0,
            "firstTxBlock": null,
            "firstTxDate": "2022-12-24T00:34:45.000Z",
            "firstTxFrom": "0x4edc01b119a224dbc0fa1297a6aca3f02af5a58d",
            "generalIssues": [
                {
                    "issues": [
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "Different versions of Solidity is used:\n\t- Version used: ['^0.8.0', '^0.8.9']\n\t- ^0.8.0 (VelaToken.sol#6)\n\t- ^0.8.0 (VelaToken.sol#17)\n\t- ^0.8.0 (VelaToken.sol#31)\n\t- ^0.8.0 (VelaToken.sol#318)\n\t- ^0.8.0 (VelaToken.sol#375)\n\t- ^0.8.0 (VelaToken.sol#400)\n\t- ^0.8.0 (VelaToken.sol#417)\n\t- ^0.8.0 (VelaToken.sol#513)\n\t- ^0.8.0 (VelaToken.sol#565)\n\t- ^0.8.0 (VelaToken.sol#594)\n\t- ^0.8.0 (VelaToken.sol#610)\n\t- ^0.8.9 (VelaToken.sol#793)\n",
                            "end": 6,
                            "governanceInfo": null,
                            "id": 214027519,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "pragma solidity ^0.8.0;",
                            "start": 6
                        }
                    ],
                    "scwDescription": "This contract may not function as expected due to inconsistent solidity compiler versions being specified.",
                    "scwId": "103",
                    "scwTitle": "Floating Pragma"
                },
                {
                    "issues": [],
                    "scwDescription": "No unchecked call responses found",
                    "scwId": "104",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No vulnerable self-destruct functions found",
                    "scwId": "106",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No assertion vulnerabilities found",
                    "scwId": "110",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No old solidity code found",
                    "scwId": "111",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No external delegated calls found",
                    "scwId": "112",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No external call dependency found",
                    "scwId": "113",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No vulnerable authentication calls found",
                    "scwId": "115",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No invalid character typos found",
                    "scwId": "129",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No RTL characters found",
                    "scwId": "130",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No dead code found",
                    "scwId": "135",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No risky data allocation found",
                    "scwId": "138",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No uninitialized state variables found",
                    "scwId": "142",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No uninitialized storage variables found",
                    "scwId": "143",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No vulnerable initialization functions found",
                    "scwId": "144",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No risky data handling found",
                    "scwId": "145",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No number accuracy bug found",
                    "scwId": "146",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No out-of-range number vulnerability found",
                    "scwId": "147",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No map data deletion vulnerabilities found",
                    "scwId": "151",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No tautologies or contradictions found",
                    "scwId": "152",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No faulty true/false values found",
                    "scwId": "153",
                    "scwTitle": null
                },
                {
                    "issues": [
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "Math.mulDiv(uint256,uint256,uint256) (VelaToken.sol#58-138) performs a multiplication on the result of a division:\n\t-denominator = denominator / twos (VelaToken.sol#105)\n\t-inverse = (3 * denominator) ^ 2 (VelaToken.sol#120)\n",
                            "end": 138,
                            "governanceInfo": null,
                            "id": 214027520,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "    function mulDiv(\n    uint256 x,\n    uint256 y,\n    uint256 denominator\n) internal pure returns (uint256 result) {\n    unchecked {\n        uint256 prod0; \n        uint256 prod1; \n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n        if (prod1 == 0) {\n            return prod0 / denominator;\n        }\n        require(denominator > prod1);\n        uint256 remainder;\n        assembly {\n            remainder := mulmod(x, y, denominator)\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n        uint256 twos = denominator & (~denominator + 1);\n        assembly {\n            denominator := div(denominator, twos)\n            prod0 := div(prod0, twos)\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        prod0 |= prod1 * twos;\n        uint256 inverse = (3 * denominator) ^ 2;\n        inverse *= 2 - denominator * inverse; \n        inverse *= 2 - denominator * inverse; \n        inverse *= 2 - denominator * inverse; \n        inverse *= 2 - denominator * inverse; \n        inverse *= 2 - denominator * inverse; \n        inverse *= 2 - denominator * inverse; \n        result = prod0 * inverse;\n        return result;\n    }",
                            "start": 58
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "Math.mulDiv(uint256,uint256,uint256) (VelaToken.sol#58-138) performs a multiplication on the result of a division:\n\t-denominator = denominator / twos (VelaToken.sol#105)\n\t-inverse *= 2 - denominator * inverse (VelaToken.sol#124)\n",
                            "end": 138,
                            "governanceInfo": null,
                            "id": 214027521,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "    function mulDiv(\n    uint256 x,\n    uint256 y,\n    uint256 denominator\n) internal pure returns (uint256 result) {\n    unchecked {\n        uint256 prod0; \n        uint256 prod1; \n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n        if (prod1 == 0) {\n            return prod0 / denominator;\n        }\n        require(denominator > prod1);\n        uint256 remainder;\n        assembly {\n            remainder := mulmod(x, y, denominator)\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n        uint256 twos = denominator & (~denominator + 1);\n        assembly {\n            denominator := div(denominator, twos)\n            prod0 := div(prod0, twos)\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        prod0 |= prod1 * twos;\n        uint256 inverse = (3 * denominator) ^ 2;\n        inverse *= 2 - denominator * inverse; \n        inverse *= 2 - denominator * inverse; \n        inverse *= 2 - denominator * inverse; \n        inverse *= 2 - denominator * inverse; \n        inverse *= 2 - denominator * inverse; \n        inverse *= 2 - denominator * inverse; \n        result = prod0 * inverse;\n        return result;\n    }",
                            "start": 58
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "Math.mulDiv(uint256,uint256,uint256) (VelaToken.sol#58-138) performs a multiplication on the result of a division:\n\t-denominator = denominator / twos (VelaToken.sol#105)\n\t-inverse *= 2 - denominator * inverse (VelaToken.sol#125)\n",
                            "end": 138,
                            "governanceInfo": null,
                            "id": 214027522,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "    function mulDiv(\n    uint256 x,\n    uint256 y,\n    uint256 denominator\n) internal pure returns (uint256 result) {\n    unchecked {\n        uint256 prod0; \n        uint256 prod1; \n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n        if (prod1 == 0) {\n            return prod0 / denominator;\n        }\n        require(denominator > prod1);\n        uint256 remainder;\n        assembly {\n            remainder := mulmod(x, y, denominator)\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n        uint256 twos = denominator & (~denominator + 1);\n        assembly {\n            denominator := div(denominator, twos)\n            prod0 := div(prod0, twos)\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        prod0 |= prod1 * twos;\n        uint256 inverse = (3 * denominator) ^ 2;\n        inverse *= 2 - denominator * inverse; \n        inverse *= 2 - denominator * inverse; \n        inverse *= 2 - denominator * inverse; \n        inverse *= 2 - denominator * inverse; \n        inverse *= 2 - denominator * inverse; \n        inverse *= 2 - denominator * inverse; \n        result = prod0 * inverse;\n        return result;\n    }",
                            "start": 58
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "Math.mulDiv(uint256,uint256,uint256) (VelaToken.sol#58-138) performs a multiplication on the result of a division:\n\t-denominator = denominator / twos (VelaToken.sol#105)\n\t-inverse *= 2 - denominator * inverse (VelaToken.sol#126)\n",
                            "end": 138,
                            "governanceInfo": null,
                            "id": 214027523,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "    function mulDiv(\n    uint256 x,\n    uint256 y,\n    uint256 denominator\n) internal pure returns (uint256 result) {\n    unchecked {\n        uint256 prod0; \n        uint256 prod1; \n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n        if (prod1 == 0) {\n            return prod0 / denominator;\n        }\n        require(denominator > prod1);\n        uint256 remainder;\n        assembly {\n            remainder := mulmod(x, y, denominator)\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n        uint256 twos = denominator & (~denominator + 1);\n        assembly {\n            denominator := div(denominator, twos)\n            prod0 := div(prod0, twos)\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        prod0 |= prod1 * twos;\n        uint256 inverse = (3 * denominator) ^ 2;\n        inverse *= 2 - denominator * inverse; \n        inverse *= 2 - denominator * inverse; \n        inverse *= 2 - denominator * inverse; \n        inverse *= 2 - denominator * inverse; \n        inverse *= 2 - denominator * inverse; \n        inverse *= 2 - denominator * inverse; \n        result = prod0 * inverse;\n        return result;\n    }",
                            "start": 58
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "Math.mulDiv(uint256,uint256,uint256) (VelaToken.sol#58-138) performs a multiplication on the result of a division:\n\t-denominator = denominator / twos (VelaToken.sol#105)\n\t-inverse *= 2 - denominator * inverse (VelaToken.sol#127)\n",
                            "end": 138,
                            "governanceInfo": null,
                            "id": 214027524,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "    function mulDiv(\n    uint256 x,\n    uint256 y,\n    uint256 denominator\n) internal pure returns (uint256 result) {\n    unchecked {\n        uint256 prod0; \n        uint256 prod1; \n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n        if (prod1 == 0) {\n            return prod0 / denominator;\n        }\n        require(denominator > prod1);\n        uint256 remainder;\n        assembly {\n            remainder := mulmod(x, y, denominator)\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n        uint256 twos = denominator & (~denominator + 1);\n        assembly {\n            denominator := div(denominator, twos)\n            prod0 := div(prod0, twos)\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        prod0 |= prod1 * twos;\n        uint256 inverse = (3 * denominator) ^ 2;\n        inverse *= 2 - denominator * inverse; \n        inverse *= 2 - denominator * inverse; \n        inverse *= 2 - denominator * inverse; \n        inverse *= 2 - denominator * inverse; \n        inverse *= 2 - denominator * inverse; \n        inverse *= 2 - denominator * inverse; \n        result = prod0 * inverse;\n        return result;\n    }",
                            "start": 58
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "Math.mulDiv(uint256,uint256,uint256) (VelaToken.sol#58-138) performs a multiplication on the result of a division:\n\t-denominator = denominator / twos (VelaToken.sol#105)\n\t-inverse *= 2 - denominator * inverse (VelaToken.sol#128)\n",
                            "end": 138,
                            "governanceInfo": null,
                            "id": 214027525,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "    function mulDiv(\n    uint256 x,\n    uint256 y,\n    uint256 denominator\n) internal pure returns (uint256 result) {\n    unchecked {\n        uint256 prod0; \n        uint256 prod1; \n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n        if (prod1 == 0) {\n            return prod0 / denominator;\n        }\n        require(denominator > prod1);\n        uint256 remainder;\n        assembly {\n            remainder := mulmod(x, y, denominator)\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n        uint256 twos = denominator & (~denominator + 1);\n        assembly {\n            denominator := div(denominator, twos)\n            prod0 := div(prod0, twos)\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        prod0 |= prod1 * twos;\n        uint256 inverse = (3 * denominator) ^ 2;\n        inverse *= 2 - denominator * inverse; \n        inverse *= 2 - denominator * inverse; \n        inverse *= 2 - denominator * inverse; \n        inverse *= 2 - denominator * inverse; \n        inverse *= 2 - denominator * inverse; \n        inverse *= 2 - denominator * inverse; \n        result = prod0 * inverse;\n        return result;\n    }",
                            "start": 58
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "Math.mulDiv(uint256,uint256,uint256) (VelaToken.sol#58-138) performs a multiplication on the result of a division:\n\t-denominator = denominator / twos (VelaToken.sol#105)\n\t-inverse *= 2 - denominator * inverse (VelaToken.sol#129)\n",
                            "end": 138,
                            "governanceInfo": null,
                            "id": 214027526,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "    function mulDiv(\n    uint256 x,\n    uint256 y,\n    uint256 denominator\n) internal pure returns (uint256 result) {\n    unchecked {\n        uint256 prod0; \n        uint256 prod1; \n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n        if (prod1 == 0) {\n            return prod0 / denominator;\n        }\n        require(denominator > prod1);\n        uint256 remainder;\n        assembly {\n            remainder := mulmod(x, y, denominator)\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n        uint256 twos = denominator & (~denominator + 1);\n        assembly {\n            denominator := div(denominator, twos)\n            prod0 := div(prod0, twos)\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        prod0 |= prod1 * twos;\n        uint256 inverse = (3 * denominator) ^ 2;\n        inverse *= 2 - denominator * inverse; \n        inverse *= 2 - denominator * inverse; \n        inverse *= 2 - denominator * inverse; \n        inverse *= 2 - denominator * inverse; \n        inverse *= 2 - denominator * inverse; \n        inverse *= 2 - denominator * inverse; \n        result = prod0 * inverse;\n        return result;\n    }",
                            "start": 58
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "Math.mulDiv(uint256,uint256,uint256) (VelaToken.sol#58-138) performs a multiplication on the result of a division:\n\t-prod0 = prod0 / twos (VelaToken.sol#108)\n\t-result = prod0 * inverse (VelaToken.sol#135)\n",
                            "end": 138,
                            "governanceInfo": null,
                            "id": 214027527,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "    function mulDiv(\n    uint256 x,\n    uint256 y,\n    uint256 denominator\n) internal pure returns (uint256 result) {\n    unchecked {\n        uint256 prod0; \n        uint256 prod1; \n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n        if (prod1 == 0) {\n            return prod0 / denominator;\n        }\n        require(denominator > prod1);\n        uint256 remainder;\n        assembly {\n            remainder := mulmod(x, y, denominator)\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n        uint256 twos = denominator & (~denominator + 1);\n        assembly {\n            denominator := div(denominator, twos)\n            prod0 := div(prod0, twos)\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        prod0 |= prod1 * twos;\n        uint256 inverse = (3 * denominator) ^ 2;\n        inverse *= 2 - denominator * inverse; \n        inverse *= 2 - denominator * inverse; \n        inverse *= 2 - denominator * inverse; \n        inverse *= 2 - denominator * inverse; \n        inverse *= 2 - denominator * inverse; \n        inverse *= 2 - denominator * inverse; \n        result = prod0 * inverse;\n        return result;\n    }",
                            "start": 58
                        }
                    ],
                    "scwDescription": "The order of operations used may result in a loss of precision.",
                    "scwId": "156",
                    "scwTitle": "Division Before Multiplication"
                },
                {
                    "issues": [],
                    "scwDescription": "No redundant constructor calls found",
                    "scwId": "157",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No vulnerable transfers found",
                    "scwId": "158",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No vulnerable return values found",
                    "scwId": "159",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No uninitialized local variables found",
                    "scwId": "160",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No default function responses found",
                    "scwId": "161",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No missing arithmetic events found",
                    "scwId": "167-a",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No missing access control events found",
                    "scwId": "167-b",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No missing zero address checks found",
                    "scwId": "168",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No redundant true/false comparisons found",
                    "scwId": "170",
                    "scwTitle": null
                },
                {
                    "issues": [
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "VelaToken._maxSupply (VelaToken.sol#802) is set pre-construction with a non-constant function or state variable:\n\t- 100000000 * 10 ** decimals()\n",
                            "end": 802,
                            "governanceInfo": null,
                            "id": 214027532,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "uint256 private _maxSupply = 100000000 * 10**decimals(); ",
                            "start": 802
                        }
                    ],
                    "scwDescription": "Some state variables in this contract can be set through dynamic functions calls, which may be unsafe.",
                    "scwId": "172",
                    "scwTitle": "Function Initializing State Variables"
                },
                {
                    "issues": [],
                    "scwDescription": "No buggy low-level calls found",
                    "scwId": "173",
                    "scwTitle": null
                },
                {
                    "issues": [
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "Pragma version^0.8.0 (VelaToken.sol#6) allows old versions\n",
                            "end": 6,
                            "governanceInfo": null,
                            "id": 214027533,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "pragma solidity ^0.8.0;",
                            "start": 6
                        },
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "Pragma version^0.8.9 (VelaToken.sol#793) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7\n",
                            "end": 793,
                            "governanceInfo": null,
                            "id": 214027534,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "pragma solidity ^0.8.9;",
                            "start": 793
                        },
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "solc-0.8.9 is not recommended for deployment\n",
                            "end": 0,
                            "governanceInfo": null,
                            "id": 214027535,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "",
                            "start": 0
                        }
                    ],
                    "scwDescription": "This contract uses an unconventional or very old version of Solidity.",
                    "scwId": "177",
                    "scwTitle": "Incorrect Solidity Version"
                },
                {
                    "issues": [],
                    "scwDescription": "No expensive loops found",
                    "scwId": "179",
                    "scwTitle": null
                },
                {
                    "issues": [
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "Contract VelaToken uses literals with too many digits:\n\t- _maxSupply = 100000000 * 10 ** decimals() (VelaToken.sol#802)\n",
                            "end": 802,
                            "governanceInfo": null,
                            "id": 214027539,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "uint256 private _maxSupply = 100000000 * 10**decimals(); ",
                            "start": 802
                        }
                    ],
                    "scwDescription": "The numeric notation used in this contract is unconventional, possibly worsening the reading/debugging experience.",
                    "scwId": "182",
                    "scwTitle": "Numeric Notation Best Practices"
                },
                {
                    "issues": [],
                    "scwDescription": "No missing constant declarations found",
                    "scwId": "183",
                    "scwTitle": null
                },
                {
                    "issues": [
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "maxSupply() should be declared external:\n\t- VelaToken.maxSupply() (VelaToken.sol#810-812)\n",
                            "end": 812,
                            "governanceInfo": null,
                            "id": 214027528,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function maxSupply() public view returns (uint256) {\nreturn _maxSupply;",
                            "start": 810
                        },
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "pause() should be declared external:\n\t- VelaToken.pause() (VelaToken.sol#814-816)\n",
                            "end": 816,
                            "governanceInfo": null,
                            "id": 214027529,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function pause() public onlyRole(PAUSER_ROLE) {\n    _pause();\n}",
                            "start": 814
                        },
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "unpause() should be declared external:\n\t- VelaToken.unpause() (VelaToken.sol#818-820)\n",
                            "end": 820,
                            "governanceInfo": null,
                            "id": 214027530,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function unpause() public onlyRole(PAUSER_ROLE) {\n    _unpause();\n}",
                            "start": 818
                        },
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "mint(address,uint256) should be declared external:\n\t- VelaToken.mint(address,uint256) (VelaToken.sol#822-825)\n",
                            "end": 825,
                            "governanceInfo": null,
                            "id": 214027531,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function mint(address to, uint256 amount) public onlyRole(MINTER_ROLE) {\n    require(totalSupply() + amount <= _maxSupply, \"Cannot mint more tokens, cap exceeded\");\n    _mint(to, amount);\n}",
                            "start": 822
                        }
                    ],
                    "scwDescription": "Some functions in this contract should be declared as external in order to save gas.",
                    "scwId": "184",
                    "scwTitle": "Public Functions Should be Declared External"
                },
                {
                    "issues": [],
                    "scwDescription": "No vulnerable payable functions found",
                    "scwId": "224",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No vulnerable message values found",
                    "scwId": "225",
                    "scwTitle": null
                }
            ],
            "governance": {
                "contractOwners": [
                    {
                        "governance": null,
                        "impact": "High",
                        "modifiable": true,
                        "multisig": null,
                        "owner": "0xce59e626f25440df32778802312a1231ae5a453e",
                        "timelock": null,
                        "timelockDelay": null,
                        "type": "6"
                    }
                ],
                "issueOwners": [
                    {
                        "owners": [
                            {
                                "governance": null,
                                "impact": "High",
                                "modifiable": true,
                                "multisig": null,
                                "owner": "0xce59E626F25440dF32778802312A1231ae5a453E",
                                "timelock": null,
                                "timelockDelay": null,
                                "type": "6"
                            }
                        ],
                        "scwId": "186"
                    },
                    {
                        "owners": [
                            {
                                "governance": null,
                                "impact": "High",
                                "modifiable": true,
                                "multisig": null,
                                "owner": "0xce59E626F25440dF32778802312A1231ae5a453E",
                                "timelock": null,
                                "timelockDelay": null,
                                "type": "6"
                            }
                        ],
                        "scwId": "189"
                    }
                ],
                "proxyOwners": [],
                "visibleOwner": "0xce59e626f25440df32778802312a1231ae5a453e"
            },
            "inProgress": false,
            "initialFunder": "0x5fed01b119a224dbc0fa1297a6aca3f02af5b69e",
            "isProxyImplementation": false,
            "logo": "",
            "name": "VelaToken(VelaToken)",
            "network": 42161,
            "pairInfo": null,
            "projectFullName": "VelaToken (VELA)",
            "projectName": "exchange",
            "protocol": "erc20",
            "proxyContractAddress": null,
            "proxyData": null,
            "rektLink": null,
            "sourceCodeLink": "https://scan-results.de.fi/0x088cd8f5ef3652623c22d48b1605dcfe860cd704_42161_src.json",
            "stats": {
                "percentage": 100,
                "scammed": false
            },
            "whitelisted": false
        }
    }
}