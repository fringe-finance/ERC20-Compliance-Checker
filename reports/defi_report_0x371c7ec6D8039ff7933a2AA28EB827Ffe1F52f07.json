{
    "data": {
        "project": {
            "address": "0x371c7ec6d8039ff7933a2aa28eb827ffe1f52f07",
            "contractName": "JoeTokenOFT",
            "coreIssues": [
                {
                    "issues": [],
                    "scwDescription": "No vulnerable withdrawal functions found",
                    "scwId": "105",
                    "scwTitle": null
                },
                {
                    "issues": [
                        {
                            "additionalData": [],
                            "data": "{\"severityChanges\": {\"from\": \"High\", \"to\": \"Low\", \"reason\": \"Only emitting events after reentrancy expression.\"}}",
                            "description": "Reentrancy in OFTCoreV2.callOnOFTReceived(uint16,bytes,uint64,bytes32,address,uint256,bytes,uint256) (OFTCoreV2.sol#40-49):\n\t- in expression:IOFTReceiverV2(_to).onOFTReceived{gas: _gasForCall}(_srcChainId,_srcAddress,_nonce,_from,_amount,_payload)",
                            "end": 49,
                            "governanceInfo": null,
                            "id": 218630830,
                            "impact": "Low",
                            "severityChanges": [
                                {
                                    "from": "High",
                                    "reason": "Only emitting events after reentrancy expression.",
                                    "to": "Low"
                                }
                            ],
                            "snippet": "function callOnOFTReceived(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes32 _from, address _to, uint _amount, bytes calldata _payload, uint _gasForCall) public virtual {\nrequire(_msgSender() == address(this), \"OFTCore: caller must be OFTCore\");\n_amount = _transferFrom(address(this), _to, _amount);\nemit ReceiveFromChain(_srcChainId, _to, _amount);\nIOFTReceiverV2(_to).onOFTReceived{gas: _gasForCall}(_srcChainId, _srcAddress, _nonce, _from, _amount, _payload);",
                            "start": 40
                        }
                    ],
                    "scwDescription": "Funds in this contract may be vulnerable to a hack through a reentrancy exploit.",
                    "scwId": "107",
                    "scwTitle": "Reentrancy Risk"
                },
                {
                    "issues": [],
                    "scwDescription": "No locks detected",
                    "scwId": "150",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Verified source code found",
                    "scwId": "185",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No mintable risks found",
                    "scwId": "186",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Users can always transfer their tokens",
                    "scwId": "189",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Contract cannot be upgraded",
                    "scwId": "193",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Wallets cannot be blacklisted from transfering the token",
                    "scwId": "208",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No transfer fees found",
                    "scwId": "209",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No transfer limits found",
                    "scwId": "211",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No ERC20 approval vulnerability found",
                    "scwId": "216-a",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Contract owner cannot abuse ERC20 approvals",
                    "scwId": "216-b",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No ERC20 interface errors found",
                    "scwId": "204-a",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No blocking loops found",
                    "scwId": "218",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No centralized balance controls found",
                    "scwId": "220",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No transfer cooldown times found",
                    "scwId": "219",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No approval restrictions found",
                    "scwId": "223",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No external calls detected",
                    "scwId": "210-b",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No airdrop-specific code found",
                    "scwId": "10004",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No vulnerable ownership functions found",
                    "scwId": "230",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No retrievable ownership found",
                    "scwId": "231",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Contract was not deployed recently",
                    "scwId": "10010",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No mixers utilized by contract deployer",
                    "scwId": "10003",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No adjustable maximum supply found",
                    "scwId": "233",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No previous scams by owner's wallet found",
                    "scwId": "10016",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "The contract operates without custom fees, ensuring security and financial integrity",
                    "scwId": "236",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Smart contract lacks a whitelisting feature, reinforcing standard restrictions and access controls, enhancing overall security and integrity",
                    "scwId": "237",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Smart contract's transfer function secure with unchangeable router, no issues, ensuring smooth, secure token transfers",
                    "scwId": "238",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Smart contract safeguarded against native token draining in token transfers/approvals",
                    "scwId": "239",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Smart contract with recent user interactions, active use, and operational functionality, not abandoned",
                    "scwId": "10022",
                    "scwTitle": "Recent Interaction was within 30 Days"
                },
                {
                    "issues": [],
                    "scwDescription": "No instances of native token drainage upon revoking tokens were detected in the contract",
                    "scwId": "10023",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Securely hardcoded Uniswap router ensuring protection against router alterations",
                    "scwId": "241",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Contract with minimal revocations, a positive indicator for stable, secure functionality",
                    "scwId": "10025",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Contract's initializer protected, enhancing security and preventing unintended issues",
                    "scwId": "242",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Smart contract intact, not self-destructed, ensuring continuity and functionality",
                    "scwId": "10026",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Contract's timelock setting aligns with 24 hours or more, enhancing security and reliability",
                    "scwId": "10027",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No suspicious activity has been detected",
                    "scwId": "10028",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "This contract maintains a strict adherence to best practices for price feed usage, ensuring data accuracy and consistency",
                    "scwId": "243",
                    "scwTitle": null
                }
            ],
            "diffs": null,
            "estimatedAnalyzingTime": 0,
            "firstTxBlock": null,
            "firstTxDate": "1674495392000",
            "firstTxFrom": "0x02ef67fc4c983e33ede836bf5aee3d92423501d9",
            "generalIssues": [
                {
                    "issues": [
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "Different versions of Solidity is used:\n\t- Version used: ['>=0.5.0', '>=0.7.6', '>=0.8.0<0.9.0', '^0.8.0']\n\t- >=0.5.0 (ILayerZeroEndpoint.sol#3)\n\t- >=0.5.0 (ILayerZeroReceiver.sol#3)\n\t- >=0.5.0 (ILayerZeroUserApplicationConfig.sol#3)\n\t- ^0.8.0 (LzApp.sol#3)\n\t- ^0.8.0 (NonblockingLzApp.sol#3)\n\t- >=0.5.0 (ICommonOFT.sol#3)\n\t- >=0.5.0 (IOFTReceiverV2.sol#3)\n\t- ^0.8.0 (OFTCoreV2.sol#3)\n\t- ^0.8.0 (BaseOFTWithFee.sol#3)\n\t- ^0.8.0 (Fee.sol#3)\n\t- >=0.5.0 (IOFTWithFee.sol#3)\n\t- ^0.8.0 (OFTWithFee.sol#3)\n\t- >=0.8.0<0.9.0 (BytesLib.sol#2)\n\t- >=0.7.6 (ExcessivelySafeCall.sol#2)\n\t- ^0.8.0 (Ownable.sol#4)\n\t- ^0.8.0 (ERC20.sol#4)\n\t- ^0.8.0 (IERC20.sol#4)\n\t- ^0.8.0 (IERC20Metadata.sol#4)\n\t- ^0.8.0 (Context.sol#4)\n\t- ^0.8.0 (ERC165.sol#4)\n\t- ^0.8.0 (IERC165.sol#4)\n\t- ^0.8.0 (JoeTokenOFT.sol#1)\n",
                            "end": 3,
                            "governanceInfo": null,
                            "id": 218630825,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "pragma solidity >=0.5.0;",
                            "start": 3
                        }
                    ],
                    "scwDescription": "This contract may not function as expected due to inconsistent solidity compiler versions being specified.",
                    "scwId": "103",
                    "scwTitle": "Floating Pragma"
                },
                {
                    "issues": [],
                    "scwDescription": "No unchecked call responses found",
                    "scwId": "104",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No vulnerable self-destruct functions found",
                    "scwId": "106",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No assertion vulnerabilities found",
                    "scwId": "110",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No old solidity code found",
                    "scwId": "111",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No external delegated calls found",
                    "scwId": "112",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No external call dependency found",
                    "scwId": "113",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No vulnerable authentication calls found",
                    "scwId": "115",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No invalid character typos found",
                    "scwId": "129",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No RTL characters found",
                    "scwId": "130",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No dead code found",
                    "scwId": "135",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No risky data allocation found",
                    "scwId": "138",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No uninitialized state variables found",
                    "scwId": "142",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No uninitialized storage variables found",
                    "scwId": "143",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No vulnerable initialization functions found",
                    "scwId": "144",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No risky data handling found",
                    "scwId": "145",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No number accuracy bug found",
                    "scwId": "146",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No out-of-range number vulnerability found",
                    "scwId": "147",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No map data deletion vulnerabilities found",
                    "scwId": "151",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No tautologies or contradictions found",
                    "scwId": "152",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No faulty true/false values found",
                    "scwId": "153",
                    "scwTitle": null
                },
                {
                    "issues": [
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "BytesLib.concatStorage(bytes,bytes) (BytesLib.sol#84-219) performs a multiplication on the result of a division:\n\t-sstore(uint256,uint256)(_preBytes,fslot_concatStorage_asm_0 + mload(uint256)(_postBytes + 0x20) / 0x100 ** 32 - mlength_concatStorage_asm_0 * 0x100 ** 32 - newlength_concatStorage_asm_0 + mlength_concatStorage_asm_0 * 2) (BytesLib.sol#108-133)\n",
                            "end": 219,
                            "governanceInfo": null,
                            "id": 218630826,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\n    assembly {\n        let fslot := sload(_preBytes.slot)\n        let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n        let mlength := mload(_postBytes)\n        let newlength := add(slength, mlength)\n        switch add(lt(slength, 32), lt(newlength, 32))\n        case 2 {\n            sstore(\n            _preBytes.slot,\n            add(\n            fslot,\n            add(\n            mul(\n            div(\n            mload(add(_postBytes, 0x20)),\n            exp(0x100, sub(32, mlength))\n            ),\n            exp(0x100, sub(32, newlength))\n            ),\n            mul(mlength, 2)\n            )\n            )\n            )\n        }\n        case 1 {\n            mstore(0x0, _preBytes.slot)\n            let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n            sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n            let submod := sub(32, slength)\n            let mc := add(_postBytes, submod)\n            let end := add(_postBytes, mlength)\n            let mask := sub(exp(0x100, submod), 1)\n            sstore(\n            sc,\n            add(\n            and(\n            fslot,\n            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\n            ),\n            and(mload(mc), mask)\n            )\n            )\n            for {\n                mc := add(mc, 0x20)\n                sc := add(sc, 1)\n            } lt(mc, end) {\n                sc := add(sc, 1)\n                mc := add(mc, 0x20)\n            } {\n                sstore(sc, mload(mc))\n            }\n            mask := exp(0x100, sub(mc, end))\n            sstore(sc, mul(div(mload(mc), mask), mask))\n        }\n        default {\n            mstore(0x0, _preBytes.slot)\n            let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n            sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n            let slengthmod := mod(slength, 32)\n            let mlengthmod := mod(mlength, 32)\n            let submod := sub(32, slengthmod)\n            let mc := add(_postBytes, submod)\n            let end := add(_postBytes, mlength)\n            let mask := sub(exp(0x100, submod), 1)\n            sstore(sc, add(sload(sc), and(mload(mc), mask)))\n            for {\n                sc := add(sc, 1)\n                mc := add(mc, 0x20)\n            } lt(mc, end) {\n                sc := add(sc, 1)\n                mc := add(mc, 0x20)\n            } {\n                sstore(sc, mload(mc))\n            }\n            mask := exp(0x100, sub(mc, end))\n            sstore(sc, mul(div(mload(mc), mask), mask))\n        }\n    }\n}",
                            "start": 84
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "BytesLib.concatStorage(bytes,bytes) (BytesLib.sol#84-219) performs a multiplication on the result of a division:\n\t-sstore(uint256,uint256)(sc_concatStorage_asm_0,mload(uint256)(mc_concatStorage_asm_0) / mask_concatStorage_asm_0 * mask_concatStorage_asm_0) (BytesLib.sol#182)\n",
                            "end": 219,
                            "governanceInfo": null,
                            "id": 218630827,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\n    assembly {\n        let fslot := sload(_preBytes.slot)\n        let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n        let mlength := mload(_postBytes)\n        let newlength := add(slength, mlength)\n        switch add(lt(slength, 32), lt(newlength, 32))\n        case 2 {\n            sstore(\n            _preBytes.slot,\n            add(\n            fslot,\n            add(\n            mul(\n            div(\n            mload(add(_postBytes, 0x20)),\n            exp(0x100, sub(32, mlength))\n            ),\n            exp(0x100, sub(32, newlength))\n            ),\n            mul(mlength, 2)\n            )\n            )\n            )\n        }\n        case 1 {\n            mstore(0x0, _preBytes.slot)\n            let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n            sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n            let submod := sub(32, slength)\n            let mc := add(_postBytes, submod)\n            let end := add(_postBytes, mlength)\n            let mask := sub(exp(0x100, submod), 1)\n            sstore(\n            sc,\n            add(\n            and(\n            fslot,\n            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\n            ),\n            and(mload(mc), mask)\n            )\n            )\n            for {\n                mc := add(mc, 0x20)\n                sc := add(sc, 1)\n            } lt(mc, end) {\n                sc := add(sc, 1)\n                mc := add(mc, 0x20)\n            } {\n                sstore(sc, mload(mc))\n            }\n            mask := exp(0x100, sub(mc, end))\n            sstore(sc, mul(div(mload(mc), mask), mask))\n        }\n        default {\n            mstore(0x0, _preBytes.slot)\n            let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n            sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n            let slengthmod := mod(slength, 32)\n            let mlengthmod := mod(mlength, 32)\n            let submod := sub(32, slengthmod)\n            let mc := add(_postBytes, submod)\n            let end := add(_postBytes, mlength)\n            let mask := sub(exp(0x100, submod), 1)\n            sstore(sc, add(sload(sc), and(mload(mc), mask)))\n            for {\n                sc := add(sc, 1)\n                mc := add(mc, 0x20)\n            } lt(mc, end) {\n                sc := add(sc, 1)\n                mc := add(mc, 0x20)\n            } {\n                sstore(sc, mload(mc))\n            }\n            mask := exp(0x100, sub(mc, end))\n            sstore(sc, mul(div(mload(mc), mask), mask))\n        }\n    }\n}",
                            "start": 84
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "BytesLib.concatStorage(bytes,bytes) (BytesLib.sol#84-219) performs a multiplication on the result of a division:\n\t-sstore(uint256,uint256)(sc_concatStorage_asm_0,mload(uint256)(mc_concatStorage_asm_0) / mask_concatStorage_asm_0 * mask_concatStorage_asm_0) (BytesLib.sol#216)\n",
                            "end": 219,
                            "governanceInfo": null,
                            "id": 218630828,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\n    assembly {\n        let fslot := sload(_preBytes.slot)\n        let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n        let mlength := mload(_postBytes)\n        let newlength := add(slength, mlength)\n        switch add(lt(slength, 32), lt(newlength, 32))\n        case 2 {\n            sstore(\n            _preBytes.slot,\n            add(\n            fslot,\n            add(\n            mul(\n            div(\n            mload(add(_postBytes, 0x20)),\n            exp(0x100, sub(32, mlength))\n            ),\n            exp(0x100, sub(32, newlength))\n            ),\n            mul(mlength, 2)\n            )\n            )\n            )\n        }\n        case 1 {\n            mstore(0x0, _preBytes.slot)\n            let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n            sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n            let submod := sub(32, slength)\n            let mc := add(_postBytes, submod)\n            let end := add(_postBytes, mlength)\n            let mask := sub(exp(0x100, submod), 1)\n            sstore(\n            sc,\n            add(\n            and(\n            fslot,\n            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\n            ),\n            and(mload(mc), mask)\n            )\n            )\n            for {\n                mc := add(mc, 0x20)\n                sc := add(sc, 1)\n            } lt(mc, end) {\n                sc := add(sc, 1)\n                mc := add(mc, 0x20)\n            } {\n                sstore(sc, mload(mc))\n            }\n            mask := exp(0x100, sub(mc, end))\n            sstore(sc, mul(div(mload(mc), mask), mask))\n        }\n        default {\n            mstore(0x0, _preBytes.slot)\n            let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n            sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n            let slengthmod := mod(slength, 32)\n            let mlengthmod := mod(mlength, 32)\n            let submod := sub(32, slengthmod)\n            let mc := add(_postBytes, submod)\n            let end := add(_postBytes, mlength)\n            let mask := sub(exp(0x100, submod), 1)\n            sstore(sc, add(sload(sc), and(mload(mc), mask)))\n            for {\n                sc := add(sc, 1)\n                mc := add(mc, 0x20)\n            } lt(mc, end) {\n                sc := add(sc, 1)\n                mc := add(mc, 0x20)\n            } {\n                sstore(sc, mload(mc))\n            }\n            mask := exp(0x100, sub(mc, end))\n            sstore(sc, mul(div(mload(mc), mask), mask))\n        }\n    }\n}",
                            "start": 84
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "BytesLib.equalStorage(bytes,bytes) (BytesLib.sol#432-502) performs a multiplication on the result of a division:\n\t-fslot_equalStorage_asm_0 = fslot_equalStorage_asm_0 / 0x100 * 0x100 (BytesLib.sol#459)\n",
                            "end": 502,
                            "governanceInfo": null,
                            "id": 218630829,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function equalStorage(\n    bytes storage _preBytes,\n    bytes memory _postBytes\n)\ninternal\nview\nreturns (bool)\n    bool success = true;\n    assembly {\n        let fslot := sload(_preBytes.slot)\n        let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n        let mlength := mload(_postBytes)\n        switch eq(slength, mlength)\n        case 1 {\n            if iszero(iszero(slength)) {\n                switch lt(slength, 32)\n                case 1 {\n                    fslot := mul(div(fslot, 0x100), 0x100)\n                    if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\n                        success := 0\n                    }\n                }\n                default {\n                    let cb := 1\n                    mstore(0x0, _preBytes.slot)\n                    let sc := keccak256(0x0, 0x20)\n                    let mc := add(_postBytes, 0x20)\n                    let end := add(mc, mlength)\n                    for {} eq(add(lt(mc, end), cb), 2) {\n                        sc := add(sc, 1)\n                        mc := add(mc, 0x20)\n                    } {\n                        if iszero(eq(sload(sc), mload(mc))) {\n                            success := 0\n                            cb := 0\n                        }\n                    }\n                }\n            }\n        }\n        default {\n            success := 0\n        }\n    }\n    return success;\n}",
                            "start": 432
                        }
                    ],
                    "scwDescription": "The order of operations used may result in a loss of precision.",
                    "scwId": "156",
                    "scwTitle": "Division Before Multiplication"
                },
                {
                    "issues": [],
                    "scwDescription": "No redundant constructor calls found",
                    "scwId": "157",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No vulnerable transfers found",
                    "scwId": "158",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No vulnerable return values found",
                    "scwId": "159",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No uninitialized local variables found",
                    "scwId": "160",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No default function responses found",
                    "scwId": "161",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No missing arithmetic events found",
                    "scwId": "167-a",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No missing access control events found",
                    "scwId": "167-b",
                    "scwTitle": null
                },
                {
                    "issues": [
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "LzApp.setPrecrime(address)._precrime (LzApp.sol#102) lacks a zero-check on :\n\t\t- precrime = _precrime (LzApp.sol#103)\n",
                            "end": 102,
                            "governanceInfo": null,
                            "id": 218630835,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function setPrecrime(address _precrime) external onlyOwner {",
                            "start": 102
                        }
                    ],
                    "scwDescription": "Some functions in this contract may not appropriately check for zero addresses being used.",
                    "scwId": "168",
                    "scwTitle": "Missing Zero Address Validation"
                },
                {
                    "issues": [],
                    "scwDescription": "No redundant true/false comparisons found",
                    "scwId": "170",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No state variables vulnerable through function calls found",
                    "scwId": "172",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No buggy low-level calls found",
                    "scwId": "173",
                    "scwTitle": null
                },
                {
                    "issues": [
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "Pragma version>=0.5.0 (ILayerZeroEndpoint.sol#3) allows old versions\n",
                            "end": 3,
                            "governanceInfo": null,
                            "id": 218630831,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "pragma solidity >=0.5.0;",
                            "start": 3
                        },
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "Pragma version^0.8.0 (LzApp.sol#3) allows old versions\n",
                            "end": 3,
                            "governanceInfo": null,
                            "id": 218630832,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "pragma solidity ^0.8.0;",
                            "start": 3
                        },
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "Pragma version>=0.8.0<0.9.0 (BytesLib.sol#2) is too complex\n",
                            "end": 2,
                            "governanceInfo": null,
                            "id": 218630833,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "pragma solidity >=0.8.0 <0.9.0;",
                            "start": 2
                        },
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "solc-0.8.12 is not recommended for deployment\n",
                            "end": 0,
                            "governanceInfo": null,
                            "id": 218630834,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "",
                            "start": 0
                        }
                    ],
                    "scwDescription": "This contract uses an unconventional or very old version of Solidity.",
                    "scwId": "177",
                    "scwTitle": "Incorrect Solidity Version"
                },
                {
                    "issues": [],
                    "scwDescription": "No expensive loops found",
                    "scwId": "179",
                    "scwTitle": null
                },
                {
                    "issues": [
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "BytesLib.toAddress(bytes,uint256) (BytesLib.sol#290-299) uses literals with too many digits:\n\t- tempAddress = mload(uint256)(_bytes + 0x20 + _start) / 0x1000000000000000000000000 (BytesLib.sol#295)\n",
                            "end": 299,
                            "governanceInfo": null,
                            "id": 218630836,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\n    require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\");\n    address tempAddress;\n    assembly {\n        tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n    }\n    return tempAddress;\n}",
                            "start": 290
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "Contract ExcessivelySafeCall uses literals with too many digits:\n\t- LOW_28_MASK = 0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff (ExcessivelySafeCall.sol#5-6)\n",
                            "end": 6,
                            "governanceInfo": null,
                            "id": 218630837,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "uint256 constant LOW_28_MASK =\n0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;",
                            "start": 5
                        }
                    ],
                    "scwDescription": "The numeric notation used in this contract is unconventional, possibly worsening the reading/debugging experience.",
                    "scwId": "182",
                    "scwTitle": "Numeric Notation Best Practices"
                },
                {
                    "issues": [],
                    "scwDescription": "No missing constant declarations found",
                    "scwId": "183",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No missing external function declarations found",
                    "scwId": "184",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No vulnerable payable functions found",
                    "scwId": "224",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No vulnerable message values found",
                    "scwId": "225",
                    "scwTitle": null
                }
            ],
            "governance": {
                "contractOwners": [
                    {
                        "governance": null,
                        "impact": "Medium",
                        "modifiable": true,
                        "multisig": {
                            "multisigOwners": [
                                "0xfA29B5d4B03ed5586Fd6e4f546004790Bbf61dbf",
                                "0xaA60B4809489acB990a9b7Ca7aa58c75781d23A8",
                                "0x5D3e4C0FE11e0aE4c32F0FF74B4544C49538AC61",
                                "0x3409D44eCE765A524301DE287b882Cda829771C7",
                                "0xfe5B84D3eeFe4bD33b97eb4905E2F1f7E1150295"
                            ],
                            "threshold": 2,
                            "transactionCount": 186
                        },
                        "owner": "0xf1ec4e41b49582af7e00d6525af78111f37b94a8",
                        "timelock": null,
                        "timelockDelay": null,
                        "type": "2"
                    }
                ],
                "issueOwners": [],
                "proxyOwners": [],
                "visibleOwner": "0xf1ec4e41b49582af7e00d6525af78111f37b94a8"
            },
            "inProgress": false,
            "initialFunder": "0x03e6fa590cadcf15a38e86158e9b3d06ff3399ba",
            "isProxyImplementation": false,
            "logo": "",
            "name": "JoeTokenOFT(JoeToken)",
            "network": 42161,
            "pairInfo": null,
            "projectFullName": "JoeToken (JOE)",
            "projectName": "defi",
            "protocol": "erc20",
            "proxyContractAddress": null,
            "proxyData": null,
            "rektLink": null,
            "sourceCodeLink": "https://scan-results.de.fi/0x371c7ec6d8039ff7933a2aa28eb827ffe1f52f07_42161_src.json",
            "stats": {
                "percentage": 99,
                "scammed": false
            },
            "whitelisted": false
        }
    }
}