{
    "data": {
        "project": {
            "address": "0x18c11fd286c5ec11c3b683caa813b77f5163a122",
            "contractName": "GainsNetworkToken",
            "coreIssues": [
                {
                    "issues": [],
                    "scwDescription": "No vulnerable withdrawal functions found",
                    "scwId": "105",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No reentrancy risk found",
                    "scwId": "107",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No locks detected",
                    "scwId": "150",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Verified source code found",
                    "scwId": "185",
                    "scwTitle": null
                },
                {
                    "issues": [
                        {
                            "additionalData": [
                                {
                                    "description": "Not Found.",
                                    "title": "Inflation rate"
                                },
                                {
                                    "description": "% of Max Supply Minted: 24%",
                                    "title": "Max supply: 100M"
                                },
                                {
                                    "description": "Not found.",
                                    "title": "Mint Timelock"
                                }
                            ],
                            "data": "{\"max_supply\":{\"type\":\"var\",\"value\":\"cap\"},\"timelock\":\"\",\"privileged\":[{\"type\":\"role\",\"value\":\"MINTER_ROLE\",\"modifiable\":true}],\"maxSupplyValue\":\"1e+26\",\"percentOfMinted\":24}",
                            "description": "Mint function: GainsNetworkToken.mint(address,uint256) (GainsNetworkToken.sol#44-46)\n\t- in internal call: _mint(to,amount)\n\t\t- In expression: _balances[account] += amount\n",
                            "end": 46,
                            "governanceInfo": {
                                "owners": [
                                    {
                                        "owner": "0xcFa6ebD475d89dB04cAd5A756fff1cb2BC5bE33c",
                                        "timelockDelay": null,
                                        "type": "5"
                                    },
                                    {
                                        "owner": "0x2c7e82641f03Fa077F88833213210A86027f15dc",
                                        "timelockDelay": null,
                                        "type": "5"
                                    },
                                    {
                                        "owner": "0xAA379DD7Ec0bae467490e89bB2055A7e01231b8f",
                                        "timelockDelay": null,
                                        "type": "5"
                                    },
                                    {
                                        "owner": "0xa3c13A8FBf49679df032d5cE8eFf2e46b3b8f560",
                                        "timelockDelay": null,
                                        "type": "5"
                                    },
                                    {
                                        "owner": "0x298a695906e16aeA0a184A2815A76eAd1a0b7522",
                                        "timelockDelay": null,
                                        "type": "5"
                                    },
                                    {
                                        "owner": "0xd85E038593d7A098614721EaE955EC2022B9B91B",
                                        "timelockDelay": null,
                                        "type": "5"
                                    },
                                    {
                                        "owner": "0x01cAaaA682Ceba8cd6c02f93BB1393fB415fA5e2",
                                        "timelockDelay": null,
                                        "type": "5"
                                    },
                                    {
                                        "owner": "0x30d8C505516Ab7693e2DE491bdceB028d8ae7EbF",
                                        "timelockDelay": null,
                                        "type": "5"
                                    },
                                    {
                                        "owner": "0x1632C38cB208df8409753729dBfbA5c58626F637",
                                        "timelockDelay": 259200,
                                        "type": "3"
                                    }
                                ],
                                "worstOwner": {
                                    "owner": "0xcFa6ebD475d89dB04cAd5A756fff1cb2BC5bE33c",
                                    "timelockDelay": null,
                                    "type": "5"
                                }
                            },
                            "id": 157774434,
                            "impact": "Informational",
                            "severityChanges": [
                                {
                                    "from": "Critical",
                                    "reason": "Token is well known and has greater than 50M in market cap.",
                                    "to": "Medium"
                                }
                            ],
                            "snippet": "function mint(address to, uint amount) external onlyRole(MINTER_ROLE) {\n    _mint(to, amount);\n}",
                            "start": 44
                        }
                    ],
                    "scwDescription": "A large amount of this token can be minted by a private wallet or contract.",
                    "scwId": "186",
                    "scwTitle": "Mintable"
                },
                {
                    "issues": [],
                    "scwDescription": "Users can always transfer their tokens",
                    "scwId": "189",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Contract cannot be upgraded",
                    "scwId": "193",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Wallets cannot be blacklisted from transfering the token",
                    "scwId": "208",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No transfer fees found",
                    "scwId": "209",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No transfer limits found",
                    "scwId": "211",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No ERC20 approval vulnerability found",
                    "scwId": "216-a",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Contract owner cannot abuse ERC20 approvals",
                    "scwId": "216-b",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No ERC20 interface errors found",
                    "scwId": "204-a",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No blocking loops found",
                    "scwId": "218",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No centralized balance controls found",
                    "scwId": "220",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No transfer cooldown times found",
                    "scwId": "219",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No approval restrictions found",
                    "scwId": "223",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No external calls detected",
                    "scwId": "210-b",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No airdrop-specific code found",
                    "scwId": "10004",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No vulnerable ownership functions found.",
                    "scwId": "230",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No retrievable ownership found.",
                    "scwId": "231",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Contract was not deployed recently.",
                    "scwId": "10010",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No mixers utilized by contract deployer.",
                    "scwId": "10003",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No adjustable maximum supply found.",
                    "scwId": "233",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No previous scams by owner's wallet found.",
                    "scwId": "10016",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "The contract operates without custom fees, ensuring security and financial integrity.",
                    "scwId": "236",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Smart contract lacks a whitelisting feature, reinforcing standard restrictions and access controls, enhancing overall security and integrity.",
                    "scwId": "237",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Smart contract's transfer function secure with unchangeable router, no issues, ensuring smooth, secure token transfers.",
                    "scwId": "238",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Smart contract safeguarded against native token draining in token transfers/approvals.",
                    "scwId": "239",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Smart contract with recent user interactions, active use, and operational functionality, not abandoned.",
                    "scwId": "10022",
                    "scwTitle": "Recent Interaction was within 30 Days."
                },
                {
                    "issues": [],
                    "scwDescription": "No instances of native token drainage upon revoking tokens were detected in the contract.",
                    "scwId": "10023",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Securely hardcoded Uniswap router ensuring protection against router alterations.",
                    "scwId": "241",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "AI model detects robust, genuine token and user activity, earning a high score, indicating trustworthiness and community integrity.",
                    "scwId": "10024",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Contract with minimal revocations, a positive indicator for stable, secure functionality.",
                    "scwId": "10025",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Contract's initializer protected, enhancing security and preventing unintended issues.",
                    "scwId": "242",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Smart contract intact, not self-destructed, ensuring continuity and functionality.",
                    "scwId": "10026",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Contract's timelock setting aligns with 24 hours or more, enhancing security and reliability.",
                    "scwId": "10027",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No suspicious activity has been detected.",
                    "scwId": "10028",
                    "scwTitle": null
                }
            ],
            "diffs": null,
            "estimatedAnalyzingTime": 0,
            "firstTxBlock": null,
            "firstTxDate": "2022-12-27T21:03:26.000Z",
            "firstTxFrom": "0xec9581354f7750bc8194e3e801f8ee1d91e2a8ac",
            "generalIssues": [
                {
                    "issues": [
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "Different versions of Solidity is used:\n\t- Version used: ['0.8.17', '^0.8.0']\n\t- 0.8.17 (GainsNetworkToken.sol#5)\n\t- ^0.8.0 (AccessControl.sol#4)\n\t- ^0.8.0 (AccessControlEnumerable.sol#4)\n\t- ^0.8.0 (IAccessControl.sol#4)\n\t- ^0.8.0 (IAccessControlEnumerable.sol#4)\n\t- ^0.8.0 (ERC20.sol#4)\n\t- ^0.8.0 (IERC20.sol#4)\n\t- ^0.8.0 (ERC20Capped.sol#4)\n\t- ^0.8.0 (IERC20Metadata.sol#4)\n\t- ^0.8.0 (Context.sol#4)\n\t- ^0.8.0 (Strings.sol#4)\n\t- ^0.8.0 (ERC165.sol#4)\n\t- ^0.8.0 (IERC165.sol#4)\n\t- ^0.8.0 (Math.sol#4)\n\t- ^0.8.0 (EnumerableSet.sol#5)\n",
                            "end": 5,
                            "governanceInfo": null,
                            "id": 157774422,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "pragma solidity 0.8.17;",
                            "start": 5
                        }
                    ],
                    "scwDescription": "This contract may not function as expected due to inconsistent solidity compiler versions being specified.",
                    "scwId": "103",
                    "scwTitle": "Floating Pragma"
                },
                {
                    "issues": [],
                    "scwDescription": "No unchecked call responses found",
                    "scwId": "104",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No vulnerable self-destruct functions found",
                    "scwId": "106",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No assertion vulnerabilities found",
                    "scwId": "110",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No old solidity code found",
                    "scwId": "111",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No external delegated calls found",
                    "scwId": "112",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No external call dependency found",
                    "scwId": "113",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No vulnerable authentication calls found",
                    "scwId": "115",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No invalid character typos found",
                    "scwId": "129",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No RTL characters found",
                    "scwId": "130",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No dead code found",
                    "scwId": "135",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No risky data allocation found",
                    "scwId": "138",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No uninitialized state variables found",
                    "scwId": "142",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No uninitialized storage variables found",
                    "scwId": "143",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No vulnerable initialization functions found",
                    "scwId": "144",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No risky data handling found",
                    "scwId": "145",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No number accuracy bug found",
                    "scwId": "146",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No out-of-range number vulnerability found",
                    "scwId": "147",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No map data deletion vulnerabilities found",
                    "scwId": "151",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No tautologies or contradictions found",
                    "scwId": "152",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No faulty true/false values found",
                    "scwId": "153",
                    "scwTitle": null
                },
                {
                    "issues": [
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "Math.mulDiv(uint256,uint256,uint256) (Math.sol#55-135) performs a multiplication on the result of a division:\n\t-denominator = denominator / twos (Math.sol#102)\n\t-inverse = (3 * denominator) ^ 2 (Math.sol#117)\n",
                            "end": 135,
                            "governanceInfo": null,
                            "id": 157774423,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function mulDiv(\n    uint256 x,\n    uint256 y,\n    uint256 denominator\n) internal pure returns (uint256 result) {\n    unchecked {\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2^256 + prod0.\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n        // Handle non-overflow cases, 256 by 256 division.\n        if (prod1 == 0) {\n            return prod0 / denominator;\n        }\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\n        require(denominator > prod1);\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n        // Make division exact by subtracting the remainder from [prod1 prod0].\n        uint256 remainder;\n        assembly {\n            // Compute remainder using mulmod.\n            remainder := mulmod(x, y, denominator)\n            // Subtract 256 bit number from 512 bit number.\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n        // See https://cs.stackexchange.com/q/138556/92363.\n        // Does not overflow because the denominator cannot be zero at this stage in the function.\n        uint256 twos = denominator & (~denominator + 1);\n        assembly {\n            // Divide denominator by twos.\n            denominator := div(denominator, twos)\n            // Divide [prod1 prod0] by twos.\n            prod0 := div(prod0, twos)\n            // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        // Shift in bits from prod1 into prod0.\n        prod0 |= prod1 * twos;\n        // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n        // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n        // four bits. That is, denominator * inv = 1 mod 2^4.\n        uint256 inverse = (3 * denominator) ^ 2;\n        // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n        // in modular arithmetic, doubling the correct bits in each step.\n        inverse *= 2 - denominator * inverse; // inverse mod 2^8\n        inverse *= 2 - denominator * inverse; // inverse mod 2^16\n        inverse *= 2 - denominator * inverse; // inverse mod 2^32\n        inverse *= 2 - denominator * inverse; // inverse mod 2^64\n        inverse *= 2 - denominator * inverse; // inverse mod 2^128\n        inverse *= 2 - denominator * inverse; // inverse mod 2^256\n        // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n        // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n        // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n        // is no longer required.\n        result = prod0 * inverse;\n        return result;\n    }\n}",
                            "start": 55
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "Math.mulDiv(uint256,uint256,uint256) (Math.sol#55-135) performs a multiplication on the result of a division:\n\t-denominator = denominator / twos (Math.sol#102)\n\t-inverse *= 2 - denominator * inverse (Math.sol#121)\n",
                            "end": 135,
                            "governanceInfo": null,
                            "id": 157774424,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function mulDiv(\n    uint256 x,\n    uint256 y,\n    uint256 denominator\n) internal pure returns (uint256 result) {\n    unchecked {\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2^256 + prod0.\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n        // Handle non-overflow cases, 256 by 256 division.\n        if (prod1 == 0) {\n            return prod0 / denominator;\n        }\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\n        require(denominator > prod1);\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n        // Make division exact by subtracting the remainder from [prod1 prod0].\n        uint256 remainder;\n        assembly {\n            // Compute remainder using mulmod.\n            remainder := mulmod(x, y, denominator)\n            // Subtract 256 bit number from 512 bit number.\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n        // See https://cs.stackexchange.com/q/138556/92363.\n        // Does not overflow because the denominator cannot be zero at this stage in the function.\n        uint256 twos = denominator & (~denominator + 1);\n        assembly {\n            // Divide denominator by twos.\n            denominator := div(denominator, twos)\n            // Divide [prod1 prod0] by twos.\n            prod0 := div(prod0, twos)\n            // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        // Shift in bits from prod1 into prod0.\n        prod0 |= prod1 * twos;\n        // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n        // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n        // four bits. That is, denominator * inv = 1 mod 2^4.\n        uint256 inverse = (3 * denominator) ^ 2;\n        // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n        // in modular arithmetic, doubling the correct bits in each step.\n        inverse *= 2 - denominator * inverse; // inverse mod 2^8\n        inverse *= 2 - denominator * inverse; // inverse mod 2^16\n        inverse *= 2 - denominator * inverse; // inverse mod 2^32\n        inverse *= 2 - denominator * inverse; // inverse mod 2^64\n        inverse *= 2 - denominator * inverse; // inverse mod 2^128\n        inverse *= 2 - denominator * inverse; // inverse mod 2^256\n        // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n        // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n        // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n        // is no longer required.\n        result = prod0 * inverse;\n        return result;\n    }\n}",
                            "start": 55
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "Math.mulDiv(uint256,uint256,uint256) (Math.sol#55-135) performs a multiplication on the result of a division:\n\t-denominator = denominator / twos (Math.sol#102)\n\t-inverse *= 2 - denominator * inverse (Math.sol#122)\n",
                            "end": 135,
                            "governanceInfo": null,
                            "id": 157774425,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function mulDiv(\n    uint256 x,\n    uint256 y,\n    uint256 denominator\n) internal pure returns (uint256 result) {\n    unchecked {\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2^256 + prod0.\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n        // Handle non-overflow cases, 256 by 256 division.\n        if (prod1 == 0) {\n            return prod0 / denominator;\n        }\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\n        require(denominator > prod1);\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n        // Make division exact by subtracting the remainder from [prod1 prod0].\n        uint256 remainder;\n        assembly {\n            // Compute remainder using mulmod.\n            remainder := mulmod(x, y, denominator)\n            // Subtract 256 bit number from 512 bit number.\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n        // See https://cs.stackexchange.com/q/138556/92363.\n        // Does not overflow because the denominator cannot be zero at this stage in the function.\n        uint256 twos = denominator & (~denominator + 1);\n        assembly {\n            // Divide denominator by twos.\n            denominator := div(denominator, twos)\n            // Divide [prod1 prod0] by twos.\n            prod0 := div(prod0, twos)\n            // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        // Shift in bits from prod1 into prod0.\n        prod0 |= prod1 * twos;\n        // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n        // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n        // four bits. That is, denominator * inv = 1 mod 2^4.\n        uint256 inverse = (3 * denominator) ^ 2;\n        // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n        // in modular arithmetic, doubling the correct bits in each step.\n        inverse *= 2 - denominator * inverse; // inverse mod 2^8\n        inverse *= 2 - denominator * inverse; // inverse mod 2^16\n        inverse *= 2 - denominator * inverse; // inverse mod 2^32\n        inverse *= 2 - denominator * inverse; // inverse mod 2^64\n        inverse *= 2 - denominator * inverse; // inverse mod 2^128\n        inverse *= 2 - denominator * inverse; // inverse mod 2^256\n        // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n        // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n        // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n        // is no longer required.\n        result = prod0 * inverse;\n        return result;\n    }\n}",
                            "start": 55
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "Math.mulDiv(uint256,uint256,uint256) (Math.sol#55-135) performs a multiplication on the result of a division:\n\t-denominator = denominator / twos (Math.sol#102)\n\t-inverse *= 2 - denominator * inverse (Math.sol#123)\n",
                            "end": 135,
                            "governanceInfo": null,
                            "id": 157774426,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function mulDiv(\n    uint256 x,\n    uint256 y,\n    uint256 denominator\n) internal pure returns (uint256 result) {\n    unchecked {\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2^256 + prod0.\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n        // Handle non-overflow cases, 256 by 256 division.\n        if (prod1 == 0) {\n            return prod0 / denominator;\n        }\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\n        require(denominator > prod1);\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n        // Make division exact by subtracting the remainder from [prod1 prod0].\n        uint256 remainder;\n        assembly {\n            // Compute remainder using mulmod.\n            remainder := mulmod(x, y, denominator)\n            // Subtract 256 bit number from 512 bit number.\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n        // See https://cs.stackexchange.com/q/138556/92363.\n        // Does not overflow because the denominator cannot be zero at this stage in the function.\n        uint256 twos = denominator & (~denominator + 1);\n        assembly {\n            // Divide denominator by twos.\n            denominator := div(denominator, twos)\n            // Divide [prod1 prod0] by twos.\n            prod0 := div(prod0, twos)\n            // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        // Shift in bits from prod1 into prod0.\n        prod0 |= prod1 * twos;\n        // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n        // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n        // four bits. That is, denominator * inv = 1 mod 2^4.\n        uint256 inverse = (3 * denominator) ^ 2;\n        // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n        // in modular arithmetic, doubling the correct bits in each step.\n        inverse *= 2 - denominator * inverse; // inverse mod 2^8\n        inverse *= 2 - denominator * inverse; // inverse mod 2^16\n        inverse *= 2 - denominator * inverse; // inverse mod 2^32\n        inverse *= 2 - denominator * inverse; // inverse mod 2^64\n        inverse *= 2 - denominator * inverse; // inverse mod 2^128\n        inverse *= 2 - denominator * inverse; // inverse mod 2^256\n        // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n        // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n        // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n        // is no longer required.\n        result = prod0 * inverse;\n        return result;\n    }\n}",
                            "start": 55
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "Math.mulDiv(uint256,uint256,uint256) (Math.sol#55-135) performs a multiplication on the result of a division:\n\t-denominator = denominator / twos (Math.sol#102)\n\t-inverse *= 2 - denominator * inverse (Math.sol#124)\n",
                            "end": 135,
                            "governanceInfo": null,
                            "id": 157774427,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function mulDiv(\n    uint256 x,\n    uint256 y,\n    uint256 denominator\n) internal pure returns (uint256 result) {\n    unchecked {\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2^256 + prod0.\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n        // Handle non-overflow cases, 256 by 256 division.\n        if (prod1 == 0) {\n            return prod0 / denominator;\n        }\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\n        require(denominator > prod1);\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n        // Make division exact by subtracting the remainder from [prod1 prod0].\n        uint256 remainder;\n        assembly {\n            // Compute remainder using mulmod.\n            remainder := mulmod(x, y, denominator)\n            // Subtract 256 bit number from 512 bit number.\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n        // See https://cs.stackexchange.com/q/138556/92363.\n        // Does not overflow because the denominator cannot be zero at this stage in the function.\n        uint256 twos = denominator & (~denominator + 1);\n        assembly {\n            // Divide denominator by twos.\n            denominator := div(denominator, twos)\n            // Divide [prod1 prod0] by twos.\n            prod0 := div(prod0, twos)\n            // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        // Shift in bits from prod1 into prod0.\n        prod0 |= prod1 * twos;\n        // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n        // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n        // four bits. That is, denominator * inv = 1 mod 2^4.\n        uint256 inverse = (3 * denominator) ^ 2;\n        // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n        // in modular arithmetic, doubling the correct bits in each step.\n        inverse *= 2 - denominator * inverse; // inverse mod 2^8\n        inverse *= 2 - denominator * inverse; // inverse mod 2^16\n        inverse *= 2 - denominator * inverse; // inverse mod 2^32\n        inverse *= 2 - denominator * inverse; // inverse mod 2^64\n        inverse *= 2 - denominator * inverse; // inverse mod 2^128\n        inverse *= 2 - denominator * inverse; // inverse mod 2^256\n        // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n        // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n        // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n        // is no longer required.\n        result = prod0 * inverse;\n        return result;\n    }\n}",
                            "start": 55
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "Math.mulDiv(uint256,uint256,uint256) (Math.sol#55-135) performs a multiplication on the result of a division:\n\t-denominator = denominator / twos (Math.sol#102)\n\t-inverse *= 2 - denominator * inverse (Math.sol#125)\n",
                            "end": 135,
                            "governanceInfo": null,
                            "id": 157774428,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function mulDiv(\n    uint256 x,\n    uint256 y,\n    uint256 denominator\n) internal pure returns (uint256 result) {\n    unchecked {\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2^256 + prod0.\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n        // Handle non-overflow cases, 256 by 256 division.\n        if (prod1 == 0) {\n            return prod0 / denominator;\n        }\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\n        require(denominator > prod1);\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n        // Make division exact by subtracting the remainder from [prod1 prod0].\n        uint256 remainder;\n        assembly {\n            // Compute remainder using mulmod.\n            remainder := mulmod(x, y, denominator)\n            // Subtract 256 bit number from 512 bit number.\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n        // See https://cs.stackexchange.com/q/138556/92363.\n        // Does not overflow because the denominator cannot be zero at this stage in the function.\n        uint256 twos = denominator & (~denominator + 1);\n        assembly {\n            // Divide denominator by twos.\n            denominator := div(denominator, twos)\n            // Divide [prod1 prod0] by twos.\n            prod0 := div(prod0, twos)\n            // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        // Shift in bits from prod1 into prod0.\n        prod0 |= prod1 * twos;\n        // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n        // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n        // four bits. That is, denominator * inv = 1 mod 2^4.\n        uint256 inverse = (3 * denominator) ^ 2;\n        // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n        // in modular arithmetic, doubling the correct bits in each step.\n        inverse *= 2 - denominator * inverse; // inverse mod 2^8\n        inverse *= 2 - denominator * inverse; // inverse mod 2^16\n        inverse *= 2 - denominator * inverse; // inverse mod 2^32\n        inverse *= 2 - denominator * inverse; // inverse mod 2^64\n        inverse *= 2 - denominator * inverse; // inverse mod 2^128\n        inverse *= 2 - denominator * inverse; // inverse mod 2^256\n        // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n        // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n        // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n        // is no longer required.\n        result = prod0 * inverse;\n        return result;\n    }\n}",
                            "start": 55
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "Math.mulDiv(uint256,uint256,uint256) (Math.sol#55-135) performs a multiplication on the result of a division:\n\t-denominator = denominator / twos (Math.sol#102)\n\t-inverse *= 2 - denominator * inverse (Math.sol#126)\n",
                            "end": 135,
                            "governanceInfo": null,
                            "id": 157774429,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function mulDiv(\n    uint256 x,\n    uint256 y,\n    uint256 denominator\n) internal pure returns (uint256 result) {\n    unchecked {\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2^256 + prod0.\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n        // Handle non-overflow cases, 256 by 256 division.\n        if (prod1 == 0) {\n            return prod0 / denominator;\n        }\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\n        require(denominator > prod1);\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n        // Make division exact by subtracting the remainder from [prod1 prod0].\n        uint256 remainder;\n        assembly {\n            // Compute remainder using mulmod.\n            remainder := mulmod(x, y, denominator)\n            // Subtract 256 bit number from 512 bit number.\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n        // See https://cs.stackexchange.com/q/138556/92363.\n        // Does not overflow because the denominator cannot be zero at this stage in the function.\n        uint256 twos = denominator & (~denominator + 1);\n        assembly {\n            // Divide denominator by twos.\n            denominator := div(denominator, twos)\n            // Divide [prod1 prod0] by twos.\n            prod0 := div(prod0, twos)\n            // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        // Shift in bits from prod1 into prod0.\n        prod0 |= prod1 * twos;\n        // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n        // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n        // four bits. That is, denominator * inv = 1 mod 2^4.\n        uint256 inverse = (3 * denominator) ^ 2;\n        // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n        // in modular arithmetic, doubling the correct bits in each step.\n        inverse *= 2 - denominator * inverse; // inverse mod 2^8\n        inverse *= 2 - denominator * inverse; // inverse mod 2^16\n        inverse *= 2 - denominator * inverse; // inverse mod 2^32\n        inverse *= 2 - denominator * inverse; // inverse mod 2^64\n        inverse *= 2 - denominator * inverse; // inverse mod 2^128\n        inverse *= 2 - denominator * inverse; // inverse mod 2^256\n        // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n        // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n        // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n        // is no longer required.\n        result = prod0 * inverse;\n        return result;\n    }\n}",
                            "start": 55
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "Math.mulDiv(uint256,uint256,uint256) (Math.sol#55-135) performs a multiplication on the result of a division:\n\t-prod0 = prod0 / twos (Math.sol#105)\n\t-result = prod0 * inverse (Math.sol#132)\n",
                            "end": 135,
                            "governanceInfo": null,
                            "id": 157774430,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function mulDiv(\n    uint256 x,\n    uint256 y,\n    uint256 denominator\n) internal pure returns (uint256 result) {\n    unchecked {\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2^256 + prod0.\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n        // Handle non-overflow cases, 256 by 256 division.\n        if (prod1 == 0) {\n            return prod0 / denominator;\n        }\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\n        require(denominator > prod1);\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n        // Make division exact by subtracting the remainder from [prod1 prod0].\n        uint256 remainder;\n        assembly {\n            // Compute remainder using mulmod.\n            remainder := mulmod(x, y, denominator)\n            // Subtract 256 bit number from 512 bit number.\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n        // See https://cs.stackexchange.com/q/138556/92363.\n        // Does not overflow because the denominator cannot be zero at this stage in the function.\n        uint256 twos = denominator & (~denominator + 1);\n        assembly {\n            // Divide denominator by twos.\n            denominator := div(denominator, twos)\n            // Divide [prod1 prod0] by twos.\n            prod0 := div(prod0, twos)\n            // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        // Shift in bits from prod1 into prod0.\n        prod0 |= prod1 * twos;\n        // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n        // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n        // four bits. That is, denominator * inv = 1 mod 2^4.\n        uint256 inverse = (3 * denominator) ^ 2;\n        // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n        // in modular arithmetic, doubling the correct bits in each step.\n        inverse *= 2 - denominator * inverse; // inverse mod 2^8\n        inverse *= 2 - denominator * inverse; // inverse mod 2^16\n        inverse *= 2 - denominator * inverse; // inverse mod 2^32\n        inverse *= 2 - denominator * inverse; // inverse mod 2^64\n        inverse *= 2 - denominator * inverse; // inverse mod 2^128\n        inverse *= 2 - denominator * inverse; // inverse mod 2^256\n        // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n        // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n        // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n        // is no longer required.\n        result = prod0 * inverse;\n        return result;\n    }\n}",
                            "start": 55
                        }
                    ],
                    "scwDescription": "The order of operations used may result in a loss of precision.",
                    "scwId": "156",
                    "scwTitle": "Division Before Multiplication"
                },
                {
                    "issues": [],
                    "scwDescription": "No redundant constructor calls found",
                    "scwId": "157",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No vulnerable transfers found",
                    "scwId": "158",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No vulnerable return values found",
                    "scwId": "159",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No uninitialized local variables found",
                    "scwId": "160",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No default function responses found",
                    "scwId": "161",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No missing arithmetic events found",
                    "scwId": "167-a",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No missing access control events found",
                    "scwId": "167-b",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No missing zero address checks found",
                    "scwId": "168",
                    "scwTitle": null
                },
                {
                    "issues": [
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "GainsNetworkToken.setupRoles(address,address,address,address,address,address) (GainsNetworkToken.sol#17-41) compares to a boolean constant:\n\t-require(bool,string)(initialized == false,INITIALIZED) (GainsNetworkToken.sol#28)\n",
                            "end": 41,
                            "governanceInfo": null,
                            "id": 157774421,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function setupRoles(\n    address tradingStorage,\n    address nftRewards,\n    address referralRewards,\n    address trading,\n    address callbacks,\n    address vault\n) external onlyRole(DEFAULT_ADMIN_ROLE){\n    require(tradingStorage != address(0) && nftRewards != address(0) && referralRewards != address(0)\n        && trading != address(0) && callbacks != address(0) && vault != address(0), \"WRONG_ADDRESSES\");\n    require(initialized == false, \"INITIALIZED\");\n    initialized = true;\n    _setupRole(MINTER_ROLE, tradingStorage);\n    _setupRole(BURNER_ROLE, tradingStorage);\n    _setupRole(MINTER_ROLE, nftRewards);\n    _setupRole(MINTER_ROLE, referralRewards);\n    _setupRole(MINTER_ROLE, trading);\n    _setupRole(MINTER_ROLE, callbacks);\n    _setupRole(MINTER_ROLE, vault);\n    _setupRole(BURNER_ROLE, vault);\n}",
                            "start": 17
                        }
                    ],
                    "scwDescription": "This contract compares boolean constants to true or false, which is unnecessary.",
                    "scwId": "170",
                    "scwTitle": "Boolean Constant Comparison"
                },
                {
                    "issues": [],
                    "scwDescription": "No state variables vulnerable through function calls found",
                    "scwId": "172",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No buggy low-level calls found",
                    "scwId": "173",
                    "scwTitle": null
                },
                {
                    "issues": [
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "Pragma version0.8.17 (GainsNetworkToken.sol#5) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7\n",
                            "end": 5,
                            "governanceInfo": null,
                            "id": 157774431,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "pragma solidity 0.8.17;",
                            "start": 5
                        },
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "Pragma version^0.8.0 (AccessControl.sol#4) allows old versions\n",
                            "end": 4,
                            "governanceInfo": null,
                            "id": 157774432,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "pragma solidity ^0.8.0;",
                            "start": 4
                        },
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "solc-0.8.17 is not recommended for deployment\n",
                            "end": 0,
                            "governanceInfo": null,
                            "id": 157774433,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "",
                            "start": 0
                        }
                    ],
                    "scwDescription": "This contract uses an unconventional or very old version of Solidity.",
                    "scwId": "177",
                    "scwTitle": "Incorrect Solidity Version"
                },
                {
                    "issues": [],
                    "scwDescription": "No expensive loops found",
                    "scwId": "179",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No bad numeric notation practices found",
                    "scwId": "182",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No missing constant declarations found",
                    "scwId": "183",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No missing external function declarations found",
                    "scwId": "184",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No vulnerable payable functions found",
                    "scwId": "224",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No vulnerable message values found",
                    "scwId": "225",
                    "scwTitle": null
                }
            ],
            "governance": {
                "contractOwners": [
                    {
                        "governance": null,
                        "impact": "Medium",
                        "modifiable": true,
                        "multisig": null,
                        "owner": "0x1632c38cb208df8409753729dbfba5c58626f637",
                        "timelock": "0x1632c38cb208df8409753729dbfba5c58626f637",
                        "timelockDelay": 259200,
                        "type": "3"
                    }
                ],
                "issueOwners": [
                    {
                        "owners": [
                            {
                                "governance": null,
                                "impact": "High",
                                "modifiable": true,
                                "multisig": null,
                                "owner": "0xcFa6ebD475d89dB04cAd5A756fff1cb2BC5bE33c",
                                "timelock": null,
                                "timelockDelay": null,
                                "type": "5"
                            },
                            {
                                "governance": null,
                                "impact": "High",
                                "modifiable": true,
                                "multisig": null,
                                "owner": "0x2c7e82641f03Fa077F88833213210A86027f15dc",
                                "timelock": null,
                                "timelockDelay": null,
                                "type": "5"
                            },
                            {
                                "governance": null,
                                "impact": "High",
                                "modifiable": true,
                                "multisig": null,
                                "owner": "0xAA379DD7Ec0bae467490e89bB2055A7e01231b8f",
                                "timelock": null,
                                "timelockDelay": null,
                                "type": "5"
                            },
                            {
                                "governance": null,
                                "impact": "High",
                                "modifiable": true,
                                "multisig": null,
                                "owner": "0xa3c13A8FBf49679df032d5cE8eFf2e46b3b8f560",
                                "timelock": null,
                                "timelockDelay": null,
                                "type": "5"
                            },
                            {
                                "governance": null,
                                "impact": "High",
                                "modifiable": true,
                                "multisig": null,
                                "owner": "0x298a695906e16aeA0a184A2815A76eAd1a0b7522",
                                "timelock": null,
                                "timelockDelay": null,
                                "type": "5"
                            },
                            {
                                "governance": null,
                                "impact": "High",
                                "modifiable": true,
                                "multisig": null,
                                "owner": "0xd85E038593d7A098614721EaE955EC2022B9B91B",
                                "timelock": null,
                                "timelockDelay": null,
                                "type": "5"
                            },
                            {
                                "governance": null,
                                "impact": "High",
                                "modifiable": true,
                                "multisig": null,
                                "owner": "0x01cAaaA682Ceba8cd6c02f93BB1393fB415fA5e2",
                                "timelock": null,
                                "timelockDelay": null,
                                "type": "5"
                            },
                            {
                                "governance": null,
                                "impact": "High",
                                "modifiable": true,
                                "multisig": null,
                                "owner": "0x30d8C505516Ab7693e2DE491bdceB028d8ae7EbF",
                                "timelock": null,
                                "timelockDelay": null,
                                "type": "5"
                            },
                            {
                                "governance": null,
                                "impact": "Medium",
                                "modifiable": true,
                                "multisig": null,
                                "owner": "0x1632C38cB208df8409753729dBfbA5c58626F637",
                                "timelock": "0x1632C38cB208df8409753729dBfbA5c58626F637",
                                "timelockDelay": 259200,
                                "type": "3"
                            }
                        ],
                        "scwId": "186"
                    }
                ],
                "proxyOwners": [],
                "visibleOwner": "0x1632c38cb208df8409753729dbfba5c58626f637"
            },
            "inProgress": false,
            "initialFunder": "0x519e23e8d6b5e1682a1635df3419828dea858018",
            "isProxyImplementation": false,
            "logo": "",
            "name": "GainsNetworkToken(Gains Network)",
            "network": 42161,
            "pairInfo": null,
            "projectFullName": "",
            "projectName": "",
            "protocol": "erc20",
            "proxyContractAddress": null,
            "proxyData": null,
            "rektLink": null,
            "sourceCodeLink": "https://scan-results.de.fi/0x18c11fd286c5ec11c3b683caa813b77f5163a122_42161_src.json",
            "stats": {
                "percentage": 100,
                "scammed": false
            },
            "whitelisted": true
        }
    }
}