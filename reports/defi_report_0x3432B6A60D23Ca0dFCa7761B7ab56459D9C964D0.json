{
    "data": {
        "project": {
            "address": "0x3432b6a60d23ca0dfca7761b7ab56459d9c964d0",
            "contractName": "FRAXShares",
            "coreIssues": [
                {
                    "issues": [],
                    "scwDescription": "No vulnerable withdrawal functions found",
                    "scwId": "105",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No reentrancy risk found",
                    "scwId": "107",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No locks detected",
                    "scwId": "150",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Verified source code found",
                    "scwId": "185",
                    "scwTitle": null
                },
                {
                    "issues": [
                        {
                            "additionalData": [
                                {
                                    "description": "Not found.",
                                    "title": "Mint max supply"
                                },
                                {
                                    "description": "Not found.",
                                    "title": "Mint Timelock"
                                }
                            ],
                            "data": "{\"max_supply\": \"\", \"timelock\": \"\", \"privileged\": [{\"type\": \"private\", \"value\": \"private\"}]}",
                            "description": "Mint function: FRAXShares.mint(address,uint256) (FXS.sol#99-101)\n\t- in internal call: _mint(to,amount)\n\t\t- In expression: _balances[account] = _balances[account].add(amount)\n",
                            "end": 101,
                            "governanceInfo": {
                                "owners": [
                                    {
                                        "owner": "",
                                        "timelockDelay": null,
                                        "type": "7"
                                    }
                                ],
                                "worstOwner": {
                                    "owner": "",
                                    "timelockDelay": null,
                                    "type": "7"
                                }
                            },
                            "id": 155415651,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function mint(address to, uint256 amount) public onlyPools {\n    _mint(to, amount);\n}",
                            "start": 99
                        },
                        {
                            "additionalData": [
                                {
                                    "description": "Not found.",
                                    "title": "Mint max supply"
                                },
                                {
                                    "description": "Not found.",
                                    "title": "Mint Timelock"
                                }
                            ],
                            "data": "{\"max_supply\": \"\", \"timelock\": \"\", \"privileged\": [{\"type\": \"private\", \"value\": \"private\"}]}",
                            "description": "Mint function: FRAXShares.pool_mint(address,uint256) (FXS.sol#104-115)\n\t- in internal call: super._mint(m_address,m_amount)\n\t\t- In expression: _balances[account] = _balances[account].add(amount)\n",
                            "end": 115,
                            "governanceInfo": {
                                "owners": [
                                    {
                                        "owner": "",
                                        "timelockDelay": null,
                                        "type": "7"
                                    }
                                ],
                                "worstOwner": {
                                    "owner": "",
                                    "timelockDelay": null,
                                    "type": "7"
                                }
                            },
                            "id": 155415652,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function pool_mint(address m_address, uint256 m_amount) external onlyPools {        \n    if(trackingVotes){\n        uint32 srcRepNum = numCheckpoints[address(this)];\n        uint96 srcRepOld = srcRepNum > 0 ? checkpoints[address(this)][srcRepNum - 1].votes : 0;\n        uint96 srcRepNew = add96(srcRepOld, uint96(m_amount), \"pool_mint new votes overflows\");\n        _writeCheckpoint(address(this), srcRepNum, srcRepOld, srcRepNew); // mint new votes\n        trackVotes(address(this), m_address, uint96(m_amount));\n    }\n    super._mint(m_address, m_amount);\n    emit FXSMinted(address(this), m_address, m_amount);\n}",
                            "start": 104
                        }
                    ],
                    "scwDescription": "A large amount of this token can be minted by a private wallet or contract.",
                    "scwId": "186",
                    "scwTitle": "Mintable"
                },
                {
                    "issues": [],
                    "scwDescription": "Users can always transfer their tokens",
                    "scwId": "189",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Contract cannot be upgraded",
                    "scwId": "193",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Wallets cannot be blacklisted from transfering the token",
                    "scwId": "208",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No transfer fees found",
                    "scwId": "209",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No transfer limits found",
                    "scwId": "211",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No ERC20 approval vulnerability found",
                    "scwId": "216-a",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Contract owner cannot abuse ERC20 approvals",
                    "scwId": "216-b",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No ERC20 interface errors found",
                    "scwId": "204-a",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No blocking loops found",
                    "scwId": "218",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No centralized balance controls found",
                    "scwId": "220",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No transfer cooldown times found",
                    "scwId": "219",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No approval restrictions found",
                    "scwId": "223",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No external calls detected",
                    "scwId": "210-b",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No airdrop-specific code found",
                    "scwId": "10004",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No vulnerable ownership functions found.",
                    "scwId": "230",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No retrievable ownership found.",
                    "scwId": "231",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Contract was not deployed recently.",
                    "scwId": "10010",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No mixers utilized by contract deployer.",
                    "scwId": "10003",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No adjustable maximum supply found.",
                    "scwId": "233",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No previous scams by owner's wallet found.",
                    "scwId": "10016",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "The contract operates without custom fees, ensuring security and financial integrity.",
                    "scwId": "236",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Smart contract lacks a whitelisting feature, reinforcing standard restrictions and access controls, enhancing overall security and integrity.",
                    "scwId": "237",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Smart contract's transfer function secure with unchangeable router, no issues, ensuring smooth, secure token transfers.",
                    "scwId": "238",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Smart contract safeguarded against native token draining in token transfers/approvals.",
                    "scwId": "239",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Smart contract with recent user interactions, active use, and operational functionality, not abandoned.",
                    "scwId": "10022",
                    "scwTitle": "Recent Interaction was within 30 Days."
                },
                {
                    "issues": [],
                    "scwDescription": "No instances of native token drainage upon revoking tokens were detected in the contract.",
                    "scwId": "10023",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Securely hardcoded Uniswap router ensuring protection against router alterations.",
                    "scwId": "241",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "AI model detects robust, genuine token and user activity, earning a high score, indicating trustworthiness and community integrity.",
                    "scwId": "10024",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Contract with minimal revocations, a positive indicator for stable, secure functionality.",
                    "scwId": "10025",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Contract's initializer protected, enhancing security and preventing unintended issues.",
                    "scwId": "242",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Smart contract intact, not self-destructed, ensuring continuity and functionality.",
                    "scwId": "10026",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "Contract's timelock setting aligns with 24 hours or more, enhancing security and reliability.",
                    "scwId": "10027",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No suspicious activity has been detected.",
                    "scwId": "10028",
                    "scwTitle": null
                }
            ],
            "diffs": null,
            "estimatedAnalyzingTime": 0,
            "firstTxBlock": null,
            "firstTxDate": "2020-12-16T17:42:40.000Z",
            "firstTxFrom": "0xa448833bece66fd8803ac0c390936c79b5fd6edf",
            "generalIssues": [
                {
                    "issues": [
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "Different versions of Solidity is used:\n\t- Version used: ['0.6.11', '>=0.6.0', '^0.6.0']\n\t- ^0.6.0 (AccessControl.sol#3)\n\t- 0.6.11 (Address.sol#2)\n\t- >=0.6.0 (AggregatorV3Interface.sol#2)\n\t- 0.6.11 (Babylonian.sol#2)\n\t- 0.6.11 (ChainlinkETHUSDPriceConsumer.sol#2)\n\t- ABIEncoderV2 (ChainlinkETHUSDPriceConsumer.sol#3)\n\t- 0.6.11 (Context.sol#2)\n\t- 0.6.11 (ERC20.sol#2)\n\t- 0.6.11 (ERC20Custom.sol#2)\n\t- ^0.6.0 (EnumerableSet.sol#3)\n\t- 0.6.11 (FXS.sol#2)\n\t- ABIEncoderV2 (FXS.sol#3)\n\t- 0.6.11 (FixedPoint.sol#2)\n\t- 0.6.11 (Frax.sol#2)\n\t- ABIEncoderV2 (Frax.sol#3)\n\t- 0.6.11 (FraxPool.sol#2)\n\t- ABIEncoderV2 (FraxPool.sol#3)\n\t- ^0.6.0 (FraxPoolLibrary.sol#2)\n\t- ABIEncoderV2 (FraxPoolLibrary.sol#3)\n\t- 0.6.11 (IERC20.sol#2)\n\t- 0.6.11 (IUniswapV2Factory.sol#2)\n\t- 0.6.11 (IUniswapV2Pair.sol#2)\n\t- 0.6.11 (SafeMath.sol#2)\n\t- 0.6.11 (UniswapPairOracle.sol#2)\n\t- 0.6.11 (UniswapV2Library.sol#2)\n\t- 0.6.11 (UniswapV2OracleLibrary.sol#2)\n",
                            "end": 3,
                            "governanceInfo": null,
                            "id": 155415631,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "pragma solidity ^0.6.0;",
                            "start": 3
                        }
                    ],
                    "scwDescription": "This contract may not function as expected due to inconsistent solidity compiler versions being specified.",
                    "scwId": "103",
                    "scwTitle": "Floating Pragma"
                },
                {
                    "issues": [],
                    "scwDescription": "No unchecked call responses found",
                    "scwId": "104",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No vulnerable self-destruct functions found",
                    "scwId": "106",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No assertion vulnerabilities found",
                    "scwId": "110",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No old solidity code found",
                    "scwId": "111",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No external delegated calls found",
                    "scwId": "112",
                    "scwTitle": null
                },
                {
                    "issues": [
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FRAXStablecoin.globalCollateralValue() (Frax.sol#161-172) has external calls inside a loop: total_collateral_value_d18 = total_collateral_value_d18.add(FraxPool(frax_pools_array[i]).collatDollarBalance()) (Frax.sol#167)\n",
                            "end": 172,
                            "governanceInfo": null,
                            "id": 155415677,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function globalCollateralValue() public view returns (uint256) {\n    uint256 total_collateral_value_d18 = 0; \n    for (uint i = 0; i < frax_pools_array.length; i++){ \n        // Exclude null addresses\n        if (frax_pools_array[i] != address(0)){\n            total_collateral_value_d18 = total_collateral_value_d18.add(FraxPool(frax_pools_array[i]).collatDollarBalance());\n        }\n    }\n    return total_collateral_value_d18;\n}",
                            "start": 161
                        }
                    ],
                    "scwDescription": "This contract uses external calls that may fail, resulting in loss of functionality.",
                    "scwId": "113",
                    "scwTitle": "DoS with Failed Call"
                },
                {
                    "issues": [],
                    "scwDescription": "No vulnerable authentication calls found",
                    "scwId": "115",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No invalid character typos found",
                    "scwId": "129",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No RTL characters found",
                    "scwId": "130",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No dead code found",
                    "scwId": "135",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No risky data allocation found",
                    "scwId": "138",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No uninitialized state variables found",
                    "scwId": "142",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No uninitialized storage variables found",
                    "scwId": "143",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No vulnerable initialization functions found",
                    "scwId": "144",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No risky data handling found",
                    "scwId": "145",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No number accuracy bug found",
                    "scwId": "146",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No out-of-range number vulnerability found",
                    "scwId": "147",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No map data deletion vulnerabilities found",
                    "scwId": "151",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No tautologies or contradictions found",
                    "scwId": "152",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No faulty true/false values found",
                    "scwId": "153",
                    "scwTitle": null
                },
                {
                    "issues": [
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FRAXStablecoin.oracle_price(FRAXStablecoin.PriceChoice) (Frax.sol#114-129) performs a multiplication on the result of a division:\n\t-eth_usd_price = uint256(eth_usd_pricer.getLatestPrice()).mul(PRICE_PRECISION).div(uint256(10) ** eth_usd_pricer_decimals) (Frax.sol#116)\n\t-eth_usd_price.mul(PRICE_PRECISION).div(price_vs_eth) (Frax.sol#128)\n",
                            "end": 129,
                            "governanceInfo": null,
                            "id": 155415632,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function oracle_price(PriceChoice choice) internal view returns (uint256) {\n    // Get the ETH / USD price first, and cut it down to 1e6 precision\n    uint256 eth_usd_price = uint256(eth_usd_pricer.getLatestPrice()).mul(PRICE_PRECISION).div(uint256(10) ** eth_usd_pricer_decimals);\n    uint256 price_vs_eth;\n    if (choice == PriceChoice.FRAX) {\n        price_vs_eth = uint256(fraxEthOracle.consult(weth_address, PRICE_PRECISION)); // How much FRAX if you put in PRICE_PRECISION WETH\n    }\n    else if (choice == PriceChoice.FXS) {\n        price_vs_eth = uint256(fxsEthOracle.consult(weth_address, PRICE_PRECISION)); // How much FXS if you put in PRICE_PRECISION WETH\n    }\n    else revert(\"INVALID PRICE CHOICE. Needs to be either 0 (FRAX) or 1 (FXS)\");\n    // Will be in 1e6 format\n    return eth_usd_price.mul(PRICE_PRECISION).div(price_vs_eth);\n}",
                            "start": 114
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FraxPool.collatDollarBalance() (FraxPool.sol#131-137) performs a multiplication on the result of a division:\n\t-collat_usd_price = eth_usd_price.mul(PRICE_PRECISION).div(eth_collat_price) (FraxPool.sol#135)\n\t-(collateral_token.balanceOf(address(this)).sub(unclaimedPoolCollateral)).mul(10 ** missing_decimals).mul(collat_usd_price).div(PRICE_PRECISION) (FraxPool.sol#136)\n",
                            "end": 137,
                            "governanceInfo": null,
                            "id": 155415633,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function collatDollarBalance() public view returns (uint256) {\n    uint256 eth_usd_price = FRAX.eth_usd_price();\n    uint256 eth_collat_price = collatEthOracle.consult(weth_address, (PRICE_PRECISION * (10 ** missing_decimals)));\n    uint256 collat_usd_price = eth_usd_price.mul(PRICE_PRECISION).div(eth_collat_price);\n    return (collateral_token.balanceOf(address(this)).sub(unclaimedPoolCollateral)).mul(10 ** missing_decimals).mul(collat_usd_price).div(PRICE_PRECISION); //.mul(getCollateralPrice()).div(1e6);    \n}",
                            "start": 131
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FraxPool.redeemFractionalFRAX(uint256,uint256,uint256) (FraxPool.sol#264-295) performs a multiplication on the result of a division:\n\t-FRAX_amount_precision = FRAX_amount_post_fee.div(10 ** missing_decimals) (FraxPool.sol#276)\n\t-collateral_dollar_value = FRAX_amount_precision.mul(global_collateral_ratio).div(PRICE_PRECISION) (FraxPool.sol#277)\n",
                            "end": 295,
                            "governanceInfo": null,
                            "id": 155415634,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function redeemFractionalFRAX(uint256 FRAX_amount, uint256 FXS_out_min, uint256 COLLATERAL_out_min) external notRedeemPaused {\n    uint256 fxs_price = FRAX.fxs_price();\n    uint256 global_collateral_ratio = FRAX.global_collateral_ratio();\n    require(global_collateral_ratio < COLLATERAL_RATIO_MAX && global_collateral_ratio > 0, \"Collateral ratio needs to be between .000001 and .999999\");\n    uint256 col_price_usd = getCollateralPrice();\n    uint256 FRAX_amount_post_fee = FRAX_amount.sub((FRAX_amount.mul(redemption_fee)).div(PRICE_PRECISION));\n    uint256 fxs_dollar_value_d18 = FRAX_amount_post_fee.sub(FRAX_amount_post_fee.mul(global_collateral_ratio).div(PRICE_PRECISION));\n    uint256 fxs_amount = fxs_dollar_value_d18.mul(PRICE_PRECISION).div(fxs_price);\n    // Need to adjust for decimals of collateral\n    uint256 FRAX_amount_precision = FRAX_amount_post_fee.div(10 ** missing_decimals);\n    uint256 collateral_dollar_value = FRAX_amount_precision.mul(global_collateral_ratio).div(PRICE_PRECISION);\n    uint256 collateral_amount = collateral_dollar_value.mul(PRICE_PRECISION).div(col_price_usd);\n    redeemCollateralBalances[msg.sender] = redeemCollateralBalances[msg.sender].add(collateral_amount);\n    unclaimedPoolCollateral = unclaimedPoolCollateral.add(collateral_amount);\n    redeemFXSBalances[msg.sender] = redeemFXSBalances[msg.sender].add(fxs_amount);\n    unclaimedPoolFXS = unclaimedPoolFXS.add(fxs_amount);\n    lastRedeemed[msg.sender] = block.number;\n    require(collateral_amount <= collateral_token.balanceOf(address(this)).sub(unclaimedPoolCollateral), \"Not enough collateral in pool\");\n    require(COLLATERAL_out_min <= collateral_amount, \"Slippage limit reached [collateral]\");\n    require(FXS_out_min <= fxs_amount, \"Slippage limit reached [FXS]\");\n    // Move all external functions to the end\n    FRAX.pool_burn_from(msg.sender, FRAX_amount);\n    FXS.pool_mint(address(this), fxs_amount);\n}",
                            "start": 264
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FraxPool.redeemFractionalFRAX(uint256,uint256,uint256) (FraxPool.sol#264-295) performs a multiplication on the result of a division:\n\t-collateral_dollar_value = FRAX_amount_precision.mul(global_collateral_ratio).div(PRICE_PRECISION) (FraxPool.sol#277)\n\t-collateral_amount = collateral_dollar_value.mul(PRICE_PRECISION).div(col_price_usd) (FraxPool.sol#278)\n",
                            "end": 295,
                            "governanceInfo": null,
                            "id": 155415635,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function redeemFractionalFRAX(uint256 FRAX_amount, uint256 FXS_out_min, uint256 COLLATERAL_out_min) external notRedeemPaused {\n    uint256 fxs_price = FRAX.fxs_price();\n    uint256 global_collateral_ratio = FRAX.global_collateral_ratio();\n    require(global_collateral_ratio < COLLATERAL_RATIO_MAX && global_collateral_ratio > 0, \"Collateral ratio needs to be between .000001 and .999999\");\n    uint256 col_price_usd = getCollateralPrice();\n    uint256 FRAX_amount_post_fee = FRAX_amount.sub((FRAX_amount.mul(redemption_fee)).div(PRICE_PRECISION));\n    uint256 fxs_dollar_value_d18 = FRAX_amount_post_fee.sub(FRAX_amount_post_fee.mul(global_collateral_ratio).div(PRICE_PRECISION));\n    uint256 fxs_amount = fxs_dollar_value_d18.mul(PRICE_PRECISION).div(fxs_price);\n    // Need to adjust for decimals of collateral\n    uint256 FRAX_amount_precision = FRAX_amount_post_fee.div(10 ** missing_decimals);\n    uint256 collateral_dollar_value = FRAX_amount_precision.mul(global_collateral_ratio).div(PRICE_PRECISION);\n    uint256 collateral_amount = collateral_dollar_value.mul(PRICE_PRECISION).div(col_price_usd);\n    redeemCollateralBalances[msg.sender] = redeemCollateralBalances[msg.sender].add(collateral_amount);\n    unclaimedPoolCollateral = unclaimedPoolCollateral.add(collateral_amount);\n    redeemFXSBalances[msg.sender] = redeemFXSBalances[msg.sender].add(fxs_amount);\n    unclaimedPoolFXS = unclaimedPoolFXS.add(fxs_amount);\n    lastRedeemed[msg.sender] = block.number;\n    require(collateral_amount <= collateral_token.balanceOf(address(this)).sub(unclaimedPoolCollateral), \"Not enough collateral in pool\");\n    require(COLLATERAL_out_min <= collateral_amount, \"Slippage limit reached [collateral]\");\n    require(FXS_out_min <= fxs_amount, \"Slippage limit reached [FXS]\");\n    // Move all external functions to the end\n    FRAX.pool_burn_from(msg.sender, FRAX_amount);\n    FXS.pool_mint(address(this), fxs_amount);\n}",
                            "start": 264
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FraxPoolLibrary.calcMint1t1FRAX(uint256,uint256,uint256) (FraxPoolLibrary.sol#38-42) performs a multiplication on the result of a division:\n\t-c_dollar_value_d18 = (collateral_amount_d18.mul(col_price_usd)).div(1e6) (FraxPoolLibrary.sol#40)\n\t-c_dollar_value_d18.sub((c_dollar_value_d18.mul(mint_fee)).div(1e6)) (FraxPoolLibrary.sol#41)\n",
                            "end": 42,
                            "governanceInfo": null,
                            "id": 155415636,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function calcMint1t1FRAX(uint256 col_price, uint256 mint_fee, uint256 collateral_amount_d18) public pure returns (uint256) {\n    uint256 col_price_usd = col_price;\n    uint256 c_dollar_value_d18 = (collateral_amount_d18.mul(col_price_usd)).div(1e6);\n    return c_dollar_value_d18.sub((c_dollar_value_d18.mul(mint_fee)).div(1e6));\n}",
                            "start": 38
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FraxPoolLibrary.calcMintAlgorithmicFRAX(uint256,uint256,uint256) (FraxPoolLibrary.sol#44-47) performs a multiplication on the result of a division:\n\t-fxs_dollar_value_d18 = fxs_amount_d18.mul(fxs_price_usd).div(1e6) (FraxPoolLibrary.sol#45)\n\t-fxs_dollar_value_d18.sub((fxs_dollar_value_d18.mul(mint_fee)).div(1e6)) (FraxPoolLibrary.sol#46)\n",
                            "end": 47,
                            "governanceInfo": null,
                            "id": 155415637,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function calcMintAlgorithmicFRAX(uint256 mint_fee, uint256 fxs_price_usd, uint256 fxs_amount_d18) public pure returns (uint256) {\n    uint256 fxs_dollar_value_d18 = fxs_amount_d18.mul(fxs_price_usd).div(1e6);\n    return fxs_dollar_value_d18.sub((fxs_dollar_value_d18.mul(mint_fee)).div(1e6));\n}",
                            "start": 44
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FraxPoolLibrary.calcMintFractionalFRAX(FraxPoolLibrary.MintFF_Params) (FraxPoolLibrary.sol#50-73) performs a multiplication on the result of a division:\n\t-c_dollar_value_d18 = params.collateral_amount.mul(params.col_price_usd).div(1e6) (FraxPoolLibrary.sol#60)\n\t-calculated_fxs_dollar_value_d18 = (c_dollar_value_d18.mul(1e6).div(params.col_ratio)).sub(c_dollar_value_d18) (FraxPoolLibrary.sol#63-65)\n",
                            "end": 73,
                            "governanceInfo": null,
                            "id": 155415638,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function calcMintFractionalFRAX(MintFF_Params memory params) internal pure returns (uint256, uint256) {\n    // Since solidity truncates division, every division operation must be the last operation in the equation to ensure minimum error\n    // The contract must check the proper ratio was sent to mint FRAX. We do this by seeing the minimum mintable FRAX based on each amount \n    uint256 fxs_dollar_value_d18;\n    uint256 c_dollar_value_d18;\n    // Scoping for stack concerns\n        // USD amounts of the collateral and the FXS\n        fxs_dollar_value_d18 = params.fxs_amount.mul(params.fxs_price_usd).div(1e6);\n        c_dollar_value_d18 = params.collateral_amount.mul(params.col_price_usd).div(1e6);\n    }\n    uint calculated_fxs_dollar_value_d18 = \n                (c_dollar_value_d18.mul(1e6).div(params.col_ratio))\n                .sub(c_dollar_value_d18);\n    uint calculated_fxs_needed = calculated_fxs_dollar_value_d18.mul(1e6).div(params.fxs_price_usd);\n    return (\n        (c_dollar_value_d18.add(calculated_fxs_dollar_value_d18)).sub(((c_dollar_value_d18.add(calculated_fxs_dollar_value_d18)).mul(params.mint_fee)).div(1e6)),\n        calculated_fxs_needed\n    );\n}",
                            "start": 50
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FraxPoolLibrary.calcRedeem1t1FRAX(uint256,uint256,uint256) (FraxPoolLibrary.sol#75-78) performs a multiplication on the result of a division:\n\t-collateral_needed_d18 = FRAX_amount.mul(1e6).div(col_price_usd) (FraxPoolLibrary.sol#76)\n\t-collateral_needed_d18.sub((collateral_needed_d18.mul(redemption_fee)).div(1e6)) (FraxPoolLibrary.sol#77)\n",
                            "end": 78,
                            "governanceInfo": null,
                            "id": 155415639,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function calcRedeem1t1FRAX(uint256 col_price_usd, uint256 FRAX_amount, uint256 redemption_fee) public pure returns (uint256) {\n    uint256 collateral_needed_d18 = FRAX_amount.mul(1e6).div(col_price_usd);\n    return collateral_needed_d18.sub((collateral_needed_d18.mul(redemption_fee)).div(1e6));\n}",
                            "start": 75
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FraxPoolLibrary.calcBuyBackFXS(FraxPoolLibrary.BuybackFXS_Params) (FraxPoolLibrary.sol#81-97) performs a multiplication on the result of a division:\n\t-fxs_dollar_value_d18 = params.FXS_amount.mul(params.fxs_price_usd).div(1e6) (FraxPoolLibrary.sol#86)\n\t-collateral_equivalent_d18 = fxs_dollar_value_d18.mul(1e6).div(params.col_price_usd) (FraxPoolLibrary.sol#90)\n",
                            "end": 97,
                            "governanceInfo": null,
                            "id": 155415640,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function calcBuyBackFXS(BuybackFXS_Params memory params) internal pure returns (uint256) {\n    // If the total collateral value is higher than the amount required at the current collateral ratio then buy back up to the possible FXS with the desired collateral\n    require(params.excess_collateral_dollar_value_d18 > 0, \"No excess collateral to buy back!\");\n    // Make sure not to take more than is available\n    uint256 fxs_dollar_value_d18 = params.FXS_amount.mul(params.fxs_price_usd).div(1e6);\n    require(fxs_dollar_value_d18 <= params.excess_collateral_dollar_value_d18, \"You are trying to buy back more than the excess!\");\n    // Get the equivalent amount of collateral based on the market value of FXS provided \n    uint256 collateral_equivalent_d18 = fxs_dollar_value_d18.mul(1e6).div(params.col_price_usd);\n    //collateral_equivalent_d18 = collateral_equivalent_d18.sub((collateral_equivalent_d18.mul(params.buyback_fee)).div(1e6));\n    return (\n        collateral_equivalent_d18\n    );\n}",
                            "start": 81
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FraxPoolLibrary.calcRecollateralizeFRAXInner(uint256,uint256,uint256,uint256,uint256) (FraxPoolLibrary.sol#108-128) performs a multiplication on the result of a division:\n\t-effective_collateral_ratio = global_collat_value.mul(1e6).div(frax_total_supply) (FraxPoolLibrary.sol#116)\n\t-recollat_possible = (global_collateral_ratio.mul(frax_total_supply).sub(frax_total_supply.mul(effective_collateral_ratio))).div(1e6) (FraxPoolLibrary.sol#117)\n",
                            "end": 128,
                            "governanceInfo": null,
                            "id": 155415641,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function calcRecollateralizeFRAXInner(\n    uint256 collateral_amount, \n    uint256 col_price,\n    uint256 global_collat_value,\n    uint256 frax_total_supply,\n    uint256 global_collateral_ratio\n) public pure returns (uint256, uint256) {\n    uint256 collat_value_attempted = collateral_amount.mul(col_price).div(1e6);\n    uint256 effective_collateral_ratio = global_collat_value.mul(1e6).div(frax_total_supply); //returns it in 1e6\n    uint256 recollat_possible = (global_collateral_ratio.mul(frax_total_supply).sub(frax_total_supply.mul(effective_collateral_ratio))).div(1e6);\n    uint256 amount_to_recollat;\n    if(collat_value_attempted <= recollat_possible){\n        amount_to_recollat = collat_value_attempted;\n    } else {\n        amount_to_recollat = recollat_possible;\n    }\n    return (amount_to_recollat.mul(1e6).div(col_price), amount_to_recollat);\n}",
                            "start": 108
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FraxPoolLibrary.calcRecollateralizeFRAXInner(uint256,uint256,uint256,uint256,uint256) (FraxPoolLibrary.sol#108-128) performs a multiplication on the result of a division:\n\t-collat_value_attempted = collateral_amount.mul(col_price).div(1e6) (FraxPoolLibrary.sol#115)\n\t-amount_to_recollat = collat_value_attempted (FraxPoolLibrary.sol#121)\n\t-(amount_to_recollat.mul(1e6).div(col_price),amount_to_recollat) (FraxPoolLibrary.sol#126)\n",
                            "end": 128,
                            "governanceInfo": null,
                            "id": 155415642,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function calcRecollateralizeFRAXInner(\n    uint256 collateral_amount, \n    uint256 col_price,\n    uint256 global_collat_value,\n    uint256 frax_total_supply,\n    uint256 global_collateral_ratio\n) public pure returns (uint256, uint256) {\n    uint256 collat_value_attempted = collateral_amount.mul(col_price).div(1e6);\n    uint256 effective_collateral_ratio = global_collat_value.mul(1e6).div(frax_total_supply); //returns it in 1e6\n    uint256 recollat_possible = (global_collateral_ratio.mul(frax_total_supply).sub(frax_total_supply.mul(effective_collateral_ratio))).div(1e6);\n    uint256 amount_to_recollat;\n    if(collat_value_attempted <= recollat_possible){\n        amount_to_recollat = collat_value_attempted;\n    } else {\n        amount_to_recollat = recollat_possible;\n    }\n    return (amount_to_recollat.mul(1e6).div(col_price), amount_to_recollat);\n}",
                            "start": 108
                        }
                    ],
                    "scwDescription": "The order of operations used may result in a loss of precision.",
                    "scwId": "156",
                    "scwTitle": "Division Before Multiplication"
                },
                {
                    "issues": [],
                    "scwDescription": "No redundant constructor calls found",
                    "scwId": "157",
                    "scwTitle": null
                },
                {
                    "issues": [
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FraxPool.mint1t1FRAX(uint256,uint256) (FraxPool.sol#170-186) ignores return value by collateral_token.transferFrom(msg.sender,address(this),collateral_amount) (FraxPool.sol#184)\n",
                            "end": 186,
                            "governanceInfo": null,
                            "id": 155415684,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function mint1t1FRAX(uint256 collateral_amount, uint256 FRAX_out_min) external notMintPaused {\n    uint256 collateral_amount_d18 = collateral_amount * (10 ** missing_decimals);\n    uint256 global_collateral_ratio = FRAX.global_collateral_ratio();\n    require(global_collateral_ratio >= COLLATERAL_RATIO_MAX, \"Collateral ratio must be >= 1\");\n    require((collateral_token.balanceOf(address(this))).sub(unclaimedPoolCollateral).add(collateral_amount) <= pool_ceiling, \"[Pool's Closed]: Ceiling reached\");\n    (uint256 frax_amount_d18) = FraxPoolLibrary.calcMint1t1FRAX(\n        getCollateralPrice(),\n        minting_fee,\n        collateral_amount_d18\n    ); //1 FRAX for each $1 worth of collateral\n    require(FRAX_out_min <= frax_amount_d18, \"Slippage limit reached\");\n    collateral_token.transferFrom(msg.sender, address(this), collateral_amount);\n    FRAX.pool_mint(msg.sender, frax_amount_d18);\n}",
                            "start": 170
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FraxPool.mintFractionalFRAX(uint256,uint256,uint256) (FraxPool.sol#207-235) ignores return value by collateral_token.transferFrom(msg.sender,address(this),collateral_amount) (FraxPool.sol#233)\n",
                            "end": 235,
                            "governanceInfo": null,
                            "id": 155415685,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function mintFractionalFRAX(uint256 collateral_amount, uint256 fxs_amount, uint256 FRAX_out_min) external notMintPaused {\n    uint256 frax_price = FRAX.frax_price();\n    uint256 fxs_price = FRAX.fxs_price();\n    uint256 global_collateral_ratio = FRAX.global_collateral_ratio();\n    require(global_collateral_ratio < COLLATERAL_RATIO_MAX && global_collateral_ratio > 0, \"Collateral ratio needs to be between .000001 and .999999\");\n    require(collateral_token.balanceOf(address(this)).sub(unclaimedPoolCollateral).add(collateral_amount) <= pool_ceiling, \"Pool ceiling reached, no more FRAX can be minted with this collateral\");\n    uint256 collateral_amount_d18 = collateral_amount * (10 ** missing_decimals);\n    FraxPoolLibrary.MintFF_Params memory input_params = FraxPoolLibrary.MintFF_Params(\n        minting_fee, \n        fxs_price,\n        frax_price,\n        getCollateralPrice(),\n        fxs_amount,\n        collateral_amount_d18,\n        (collateral_token.balanceOf(address(this)).sub(unclaimedPoolCollateral)),\n        pool_ceiling,\n        global_collateral_ratio\n    );\n    (uint256 mint_amount, uint256 fxs_needed) = FraxPoolLibrary.calcMintFractionalFRAX(input_params);\n    require(FRAX_out_min <= mint_amount, \"Slippage limit reached\");\n    require(fxs_needed <= fxs_amount, \"Not enough FXS inputted\");\n    FXS.pool_burn_from(msg.sender, fxs_needed);\n    collateral_token.transferFrom(msg.sender, address(this), collateral_amount);\n    FRAX.pool_mint(msg.sender, mint_amount);\n}",
                            "start": 207
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FraxPool.collectRedemption() (FraxPool.sol#322-352) ignores return value by FXS.transfer(msg.sender,FXSAmount) (FraxPool.sol#347)\n",
                            "end": 352,
                            "governanceInfo": null,
                            "id": 155415686,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function collectRedemption() external {\n    require((lastRedeemed[msg.sender].add(redemption_delay)) <= block.number, \"Must wait for redemption_delay blocks before collecting redemption\");\n    bool sendFXS = false;\n    bool sendCollateral = false;\n    uint FXSAmount;\n    uint CollateralAmount;\n    // Use Checks-Effects-Interactions pattern\n    if(redeemFXSBalances[msg.sender] > 0){\n        FXSAmount = redeemFXSBalances[msg.sender];\n        redeemFXSBalances[msg.sender] = 0;\n        unclaimedPoolFXS = unclaimedPoolFXS.sub(FXSAmount);\n        sendFXS = true;\n    }\n    if(redeemCollateralBalances[msg.sender] > 0){\n        CollateralAmount = redeemCollateralBalances[msg.sender];\n        redeemCollateralBalances[msg.sender] = 0;\n        unclaimedPoolCollateral = unclaimedPoolCollateral.sub(CollateralAmount);\n        sendCollateral = true;\n    }\n    if(sendFXS == true){\n        FXS.transfer(msg.sender, FXSAmount);\n    }\n    if(sendCollateral == true){\n        collateral_token.transfer(msg.sender, CollateralAmount);\n    }\n}",
                            "start": 322
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FraxPool.collectRedemption() (FraxPool.sol#322-352) ignores return value by collateral_token.transfer(msg.sender,CollateralAmount) (FraxPool.sol#350)\n",
                            "end": 352,
                            "governanceInfo": null,
                            "id": 155415687,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function collectRedemption() external {\n    require((lastRedeemed[msg.sender].add(redemption_delay)) <= block.number, \"Must wait for redemption_delay blocks before collecting redemption\");\n    bool sendFXS = false;\n    bool sendCollateral = false;\n    uint FXSAmount;\n    uint CollateralAmount;\n    // Use Checks-Effects-Interactions pattern\n    if(redeemFXSBalances[msg.sender] > 0){\n        FXSAmount = redeemFXSBalances[msg.sender];\n        redeemFXSBalances[msg.sender] = 0;\n        unclaimedPoolFXS = unclaimedPoolFXS.sub(FXSAmount);\n        sendFXS = true;\n    }\n    if(redeemCollateralBalances[msg.sender] > 0){\n        CollateralAmount = redeemCollateralBalances[msg.sender];\n        redeemCollateralBalances[msg.sender] = 0;\n        unclaimedPoolCollateral = unclaimedPoolCollateral.sub(CollateralAmount);\n        sendCollateral = true;\n    }\n    if(sendFXS == true){\n        FXS.transfer(msg.sender, FXSAmount);\n    }\n    if(sendCollateral == true){\n        collateral_token.transfer(msg.sender, CollateralAmount);\n    }\n}",
                            "start": 322
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FraxPool.recollateralizeFRAX(uint256,uint256) (FraxPool.sol#359-383) ignores return value by collateral_token.transferFrom(msg.sender,address(this),collateral_units_precision) (FraxPool.sol#380)\n",
                            "end": 383,
                            "governanceInfo": null,
                            "id": 155415688,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function recollateralizeFRAX(uint256 collateral_amount, uint256 FXS_out_min) external {\n    require(recollateralizePaused == false, \"Recollateralize is paused\");\n    uint256 collateral_amount_d18 = collateral_amount * (10 ** missing_decimals);\n    uint256 fxs_price = FRAX.fxs_price();\n    uint256 frax_total_supply = FRAX.totalSupply();\n    uint256 global_collateral_ratio = FRAX.global_collateral_ratio();\n    uint256 global_collat_value = FRAX.globalCollateralValue();\n    (uint256 collateral_units, uint256 amount_to_recollat) = FraxPoolLibrary.calcRecollateralizeFRAXInner(\n        collateral_amount_d18,\n        getCollateralPrice(),\n        global_collat_value,\n        frax_total_supply,\n        global_collateral_ratio\n    ); \n    uint256 collateral_units_precision = collateral_units.div(10 ** missing_decimals);\n    uint256 fxs_paid_back = amount_to_recollat.mul(uint(1e6).add(bonus_rate)).div(fxs_price);\n    require(FXS_out_min <= fxs_paid_back, \"Slippage limit reached\");\n    collateral_token.transferFrom(msg.sender, address(this), collateral_units_precision);\n    FXS.pool_mint(msg.sender, fxs_paid_back);\n}",
                            "start": 359
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FraxPool.buyBackFXS(uint256,uint256) (FraxPool.sol#387-405) ignores return value by collateral_token.transfer(msg.sender,collateral_precision) (FraxPool.sol#404)\n",
                            "end": 405,
                            "governanceInfo": null,
                            "id": 155415689,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function buyBackFXS(uint256 FXS_amount, uint256 COLLATERAL_out_min) external {\n    require(buyBackPaused == false, \"Buyback is paused\");\n    uint256 fxs_price = FRAX.fxs_price();\n    FraxPoolLibrary.BuybackFXS_Params memory input_params = FraxPoolLibrary.BuybackFXS_Params(\n        availableExcessCollatDV(),\n        fxs_price,\n        getCollateralPrice(),\n        FXS_amount\n    );\n    (uint256 collateral_equivalent_d18) = FraxPoolLibrary.calcBuyBackFXS(input_params);\n    uint256 collateral_precision = collateral_equivalent_d18.div(10 ** missing_decimals);\n    require(COLLATERAL_out_min <= collateral_precision, \"Slippage limit reached\");\n    // Give the sender their desired collateral and burn the FXS\n    FXS.pool_burn_from(msg.sender, FXS_amount);\n    collateral_token.transfer(msg.sender, collateral_precision);\n}",
                            "start": 387
                        }
                    ],
                    "scwDescription": "A transfer call made in this contract may be unstable and cause tokens to become stuck",
                    "scwId": "158",
                    "scwTitle": "Unchecked Transfer"
                },
                {
                    "issues": [],
                    "scwDescription": "No vulnerable return values found",
                    "scwId": "159",
                    "scwTitle": null
                },
                {
                    "issues": [
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FraxPool.collectRedemption().FXSAmount (FraxPool.sol#326) is a local variable never initialized\n",
                            "end": 326,
                            "governanceInfo": null,
                            "id": 155415690,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "uint FXSAmount;",
                            "start": 326
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FixedPoint.mul(FixedPoint.uq112x112,uint256).z (FixedPoint.sol#43) is a local variable never initialized\n",
                            "end": 43,
                            "governanceInfo": null,
                            "id": 155415691,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "uint z;",
                            "start": 43
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "UniswapV2Library.getAmountsOut(address,uint256,address[]).i (UniswapV2Library.sol#74) is a local variable never initialized\n",
                            "end": 74,
                            "governanceInfo": null,
                            "id": 155415692,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "for (uint i; i < path.length - 1; i++) {",
                            "start": 74
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FRAXStablecoin.oracle_price(FRAXStablecoin.PriceChoice).price_vs_eth (Frax.sol#117) is a local variable never initialized\n",
                            "end": 117,
                            "governanceInfo": null,
                            "id": 155415693,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "uint256 price_vs_eth;",
                            "start": 117
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FraxPool.collectRedemption().CollateralAmount (FraxPool.sol#327) is a local variable never initialized\n",
                            "end": 327,
                            "governanceInfo": null,
                            "id": 155415694,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "uint CollateralAmount;",
                            "start": 327
                        }
                    ],
                    "scwDescription": "This contract's local variables are not all initialized, potentially resulting in lost funds or other exploits.",
                    "scwId": "160",
                    "scwTitle": "Uninitialized Local Variables"
                },
                {
                    "issues": [],
                    "scwDescription": "No default function responses found",
                    "scwId": "161",
                    "scwTitle": null
                },
                {
                    "issues": [
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FRAXStablecoin.setRedemptionFee(uint256) (Frax.sol#243-245) should emit an event for: \n\t- redemption_fee = red_fee (Frax.sol#244) \n",
                            "end": 245,
                            "governanceInfo": null,
                            "id": 155415662,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function setRedemptionFee(uint256 red_fee) public onlyByOwnerOrGovernance {\n    redemption_fee = red_fee;\n}",
                            "start": 243
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FRAXStablecoin.setMintingFee(uint256) (Frax.sol#247-249) should emit an event for: \n\t- minting_fee = min_fee (Frax.sol#248) \n",
                            "end": 249,
                            "governanceInfo": null,
                            "id": 155415663,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function setMintingFee(uint256 min_fee) public onlyByOwnerOrGovernance {\n    minting_fee = min_fee;\n}  ",
                            "start": 247
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FRAXStablecoin.setFraxStep(uint256) (Frax.sol#251-253) should emit an event for: \n\t- frax_step = _new_step (Frax.sol#252) \n",
                            "end": 253,
                            "governanceInfo": null,
                            "id": 155415664,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function setFraxStep(uint256 _new_step) public onlyByOwnerOrGovernance {\n    frax_step = _new_step;\n}  ",
                            "start": 251
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FRAXStablecoin.setPriceTarget(uint256) (Frax.sol#255-257) should emit an event for: \n\t- price_target = _new_price_target (Frax.sol#256) \n",
                            "end": 257,
                            "governanceInfo": null,
                            "id": 155415665,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function setPriceTarget (uint256 _new_price_target) public onlyByOwnerOrGovernance {\n    price_target = _new_price_target;\n}",
                            "start": 255
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FRAXStablecoin.setRefreshCooldown(uint256) (Frax.sol#259-261) should emit an event for: \n\t- refresh_cooldown = _new_cooldown (Frax.sol#260) \n",
                            "end": 261,
                            "governanceInfo": null,
                            "id": 155415666,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function setRefreshCooldown(uint256 _new_cooldown) public onlyByOwnerOrGovernance {\n\trefresh_cooldown = _new_cooldown;\n}",
                            "start": 259
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FRAXStablecoin.setETHUSDOracle(address) (Frax.sol#267-271) should emit an event for: \n\t- eth_usd_pricer_decimals = eth_usd_pricer.getDecimals() (Frax.sol#270) \n",
                            "end": 271,
                            "governanceInfo": null,
                            "id": 155415667,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function setETHUSDOracle(address _eth_usd_consumer_address) public onlyByOwnerOrGovernance {\n    eth_usd_consumer_address = _eth_usd_consumer_address;\n    eth_usd_pricer = ChainlinkETHUSDPriceConsumer(eth_usd_consumer_address);\n    eth_usd_pricer_decimals = eth_usd_pricer.getDecimals();\n}",
                            "start": 267
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FRAXStablecoin.setPriceBand(uint256) (Frax.sol#281-283) should emit an event for: \n\t- price_band = _price_band (Frax.sol#282) \n",
                            "end": 283,
                            "governanceInfo": null,
                            "id": 155415668,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function setPriceBand(uint256 _price_band) external onlyByOwnerOrGovernance {\n    price_band = _price_band;\n}",
                            "start": 281
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FraxPool.setPoolParameters(uint256,uint256,uint256) (FraxPool.sol#441-447) should emit an event for: \n\t- pool_ceiling = new_ceiling (FraxPool.sol#442) \n\t- bonus_rate = new_bonus_rate (FraxPool.sol#443) \n\t- redemption_delay = new_redemption_delay (FraxPool.sol#444) \n",
                            "end": 447,
                            "governanceInfo": null,
                            "id": 155415669,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function setPoolParameters(uint256 new_ceiling, uint256 new_bonus_rate, uint256 new_redemption_delay) external onlyByOwnerOrGovernance {\n    pool_ceiling = new_ceiling;\n    bonus_rate = new_bonus_rate;\n    redemption_delay = new_redemption_delay;\n    minting_fee = FRAX.minting_fee();\n    redemption_fee = FRAX.redemption_fee();\n}",
                            "start": 441
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "UniswapPairOracle.setPeriod(uint256) (UniswapPairOracle.sol#60-62) should emit an event for: \n\t- PERIOD = _period (UniswapPairOracle.sol#61) \n",
                            "end": 62,
                            "governanceInfo": null,
                            "id": 155415670,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function setPeriod(uint _period) external onlyByOwnerOrGovernance {\n    PERIOD = _period;\n}",
                            "start": 60
                        }
                    ],
                    "scwDescription": "This contract is missing useful arithmetic events.",
                    "scwId": "167-a",
                    "scwTitle": "Missing Arithmetic Events"
                },
                {
                    "issues": [
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FRAXShares.setTimelock(address) (FXS.sol#83-85) should emit an event for: \n\t- timelock_address = new_timelock (FXS.sol#84) \n",
                            "end": 85,
                            "governanceInfo": null,
                            "id": 155415653,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function setTimelock(address new_timelock) external onlyByOwnerOrGovernance {\n    timelock_address = new_timelock;\n}",
                            "start": 83
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FRAXShares.setOwner(address) (FXS.sol#95-97) should emit an event for: \n\t- owner_address = _owner_address (FXS.sol#96) \n",
                            "end": 97,
                            "governanceInfo": null,
                            "id": 155415654,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function setOwner(address _owner_address) external onlyByOwnerOrGovernance {\n    owner_address = _owner_address;\n}",
                            "start": 95
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FRAXStablecoin.setOwner(address) (Frax.sol#239-241) should emit an event for: \n\t- owner_address = _owner_address (Frax.sol#240) \n\t- owner_address = _owner_address (Frax.sol#240) \n",
                            "end": 241,
                            "governanceInfo": null,
                            "id": 155415655,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function setOwner(address _owner_address) external onlyByOwnerOrGovernance {\n    owner_address = _owner_address;\n}",
                            "start": 239
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FRAXStablecoin.setTimelock(address) (Frax.sol#273-275) should emit an event for: \n\t- timelock_address = new_timelock (Frax.sol#274) \n\t- timelock_address = new_timelock (Frax.sol#274) \n",
                            "end": 275,
                            "governanceInfo": null,
                            "id": 155415656,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function setTimelock(address new_timelock) external onlyByOwnerOrGovernance {\n    timelock_address = new_timelock;\n}",
                            "start": 273
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FRAXStablecoin.setController(address) (Frax.sol#277-279) should emit an event for: \n\t- controller_address = _controller_address (Frax.sol#278) \n",
                            "end": 279,
                            "governanceInfo": null,
                            "id": 155415657,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function setController(address _controller_address) external onlyByOwnerOrGovernance {\n    controller_address = _controller_address;\n}",
                            "start": 277
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FraxPool.setTimelock(address) (FraxPool.sol#449-451) should emit an event for: \n\t- timelock_address = new_timelock (FraxPool.sol#450) \n",
                            "end": 451,
                            "governanceInfo": null,
                            "id": 155415658,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function setTimelock(address new_timelock) external onlyByOwnerOrGovernance {\n    timelock_address = new_timelock;\n}",
                            "start": 449
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FraxPool.setOwner(address) (FraxPool.sol#453-455) should emit an event for: \n\t- owner_address = _owner_address (FraxPool.sol#454) \n",
                            "end": 455,
                            "governanceInfo": null,
                            "id": 155415659,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function setOwner(address _owner_address) external onlyByOwnerOrGovernance {\n    owner_address = _owner_address;\n}",
                            "start": 453
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "UniswapPairOracle.setOwner(address) (UniswapPairOracle.sol#52-54) should emit an event for: \n\t- owner_address = _owner_address (UniswapPairOracle.sol#53) \n",
                            "end": 54,
                            "governanceInfo": null,
                            "id": 155415660,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function setOwner(address _owner_address) external onlyByOwnerOrGovernance {\n    owner_address = _owner_address;\n}",
                            "start": 52
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "UniswapPairOracle.setTimelock(address) (UniswapPairOracle.sol#56-58) should emit an event for: \n\t- timelock_address = _timelock_address (UniswapPairOracle.sol#57) \n",
                            "end": 58,
                            "governanceInfo": null,
                            "id": 155415661,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function setTimelock(address _timelock_address) external onlyByOwnerOrGovernance {\n    timelock_address = _timelock_address;\n}",
                            "start": 56
                        }
                    ],
                    "scwDescription": "This contract is missing useful events with regards to access control changes.",
                    "scwId": "167-b",
                    "scwTitle": "Missing Access Control Events"
                },
                {
                    "issues": [
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FRAXShares.constructor(string,string,address,address,address)._owner_address (FXS.sol#62) lacks a zero-check on :\n\t\t- owner_address = _owner_address (FXS.sol#67)\n",
                            "end": 62,
                            "governanceInfo": null,
                            "id": 155415671,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "address _owner_address,",
                            "start": 62
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FRAXShares.constructor(string,string,address,address,address)._oracle_address (FXS.sol#61) lacks a zero-check on :\n\t\t- oracle_address = _oracle_address (FXS.sol#68)\n",
                            "end": 61,
                            "governanceInfo": null,
                            "id": 155415672,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "address _oracle_address,",
                            "start": 61
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FRAXShares.constructor(string,string,address,address,address)._timelock_address (FXS.sol#63) lacks a zero-check on :\n\t\t- timelock_address = _timelock_address (FXS.sol#69)\n",
                            "end": 63,
                            "governanceInfo": null,
                            "id": 155415673,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "address _timelock_address",
                            "start": 63
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FRAXShares.setOracle(address).new_oracle (FXS.sol#79) lacks a zero-check on :\n\t\t- oracle_address = new_oracle (FXS.sol#80)\n",
                            "end": 79,
                            "governanceInfo": null,
                            "id": 155415674,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function setOracle(address new_oracle) external onlyByOwnerOrGovernance {",
                            "start": 79
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FRAXShares.setTimelock(address).new_timelock (FXS.sol#83) lacks a zero-check on :\n\t\t- timelock_address = new_timelock (FXS.sol#84)\n",
                            "end": 83,
                            "governanceInfo": null,
                            "id": 155415675,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function setTimelock(address new_timelock) external onlyByOwnerOrGovernance {",
                            "start": 83
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FRAXShares.setOwner(address)._owner_address (FXS.sol#95) lacks a zero-check on :\n\t\t- owner_address = _owner_address (FXS.sol#96)\n",
                            "end": 95,
                            "governanceInfo": null,
                            "id": 155415676,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function setOwner(address _owner_address) external onlyByOwnerOrGovernance {",
                            "start": 95
                        }
                    ],
                    "scwDescription": "Some functions in this contract may not appropriately check for zero addresses being used.",
                    "scwId": "168",
                    "scwTitle": "Missing Zero Address Validation"
                },
                {
                    "issues": [
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "FRAXShares.onlyPools() (FXS.sol#46-49) compares to a boolean constant:\n\t-require(bool,string)(FRAX.frax_pools(msg.sender) == true,Only frax pools can mint new FRAX) (FXS.sol#47)\n",
                            "end": 49,
                            "governanceInfo": null,
                            "id": 155415616,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "modifier onlyPools() {\n   require(FRAX.frax_pools(msg.sender) == true, \"Only frax pools can mint new FRAX\");\n    _;\n} ",
                            "start": 46
                        },
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "FRAXStablecoin.refreshCollateralRatio() (Frax.sol#178-200) compares to a boolean constant:\n\t-require(bool,string)(collateral_ratio_paused == false,Collateral Ratio has been paused) (Frax.sol#179)\n",
                            "end": 200,
                            "governanceInfo": null,
                            "id": 155415617,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function refreshCollateralRatio() public {\n    require(collateral_ratio_paused == false, \"Collateral Ratio has been paused\");\n    uint256 frax_price_cur = frax_price();\n    require(block.timestamp - last_call_time >= refresh_cooldown, \"Must wait for the refresh cooldown since last refresh\");\n    // Step increments are 0.25% (upon genesis, changable by setFraxStep()) \n    if (frax_price_cur > price_target.add(price_band)) { //decrease collateral ratio\n        if(global_collateral_ratio <= frax_step){ //if within a step of 0, go to 0\n            global_collateral_ratio = 0;\n        } else {\n            global_collateral_ratio = global_collateral_ratio.sub(frax_step);\n        }\n    } else if (frax_price_cur < price_target.sub(price_band)) { //increase collateral ratio\n        if(global_collateral_ratio.add(frax_step) >= 1000000){\n            global_collateral_ratio = 1000000; // cap collateral ratio at 1.000000\n        } else {\n            global_collateral_ratio = global_collateral_ratio.add(frax_step);\n        }\n    }\n    last_call_time = block.timestamp; // Set the time of the last expansion\n}",
                            "start": 178
                        },
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "FRAXStablecoin.addPool(address) (Frax.sol#217-221) compares to a boolean constant:\n\t-require(bool,string)(frax_pools[pool_address] == false,address already exists) (Frax.sol#218)\n",
                            "end": 221,
                            "governanceInfo": null,
                            "id": 155415618,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function addPool(address pool_address) public onlyByOwnerOrGovernance {\n    require(frax_pools[pool_address] == false, \"address already exists\");\n    frax_pools[pool_address] = true; \n    frax_pools_array.push(pool_address);\n}",
                            "start": 217
                        },
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "FRAXStablecoin.removePool(address) (Frax.sol#224-237) compares to a boolean constant:\n\t-require(bool,string)(frax_pools[pool_address] == true,address doesn't exist already) (Frax.sol#225)\n",
                            "end": 237,
                            "governanceInfo": null,
                            "id": 155415619,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function removePool(address pool_address) public onlyByOwnerOrGovernance {\n    require(frax_pools[pool_address] == true, \"address doesn't exist already\");\n    // Delete from the mapping\n    delete frax_pools[pool_address];\n    // 'Delete' from the array by setting the address to 0x0\n    for (uint i = 0; i < frax_pools_array.length; i++){ \n        if (frax_pools_array[i] == pool_address) {\n            frax_pools_array[i] = address(0); // This will leave a null in the array and keep the indices the same\n            break;\n        }\n    }\n}",
                            "start": 224
                        },
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "FRAXStablecoin.onlyPools() (Frax.sol#67-70) compares to a boolean constant:\n\t-require(bool,string)(frax_pools[msg.sender] == true,Only frax pools can call this function) (Frax.sol#68)\n",
                            "end": 70,
                            "governanceInfo": null,
                            "id": 155415620,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "modifier onlyPools() {\n   require(frax_pools[msg.sender] == true, \"Only frax pools can call this function\");\n    _;\n} ",
                            "start": 67
                        },
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "FRAXStablecoin.onlyByOwnerGovernanceOrPool() (Frax.sol#77-84) compares to a boolean constant:\n\t-require(bool,string)(msg.sender == owner_address || msg.sender == timelock_address || frax_pools[msg.sender] == true,You are not the owner, the governance timelock, or a pool) (Frax.sol#78-82)\n",
                            "end": 84,
                            "governanceInfo": null,
                            "id": 155415621,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "modifier onlyByOwnerGovernanceOrPool() {\n    require(\n        msg.sender == owner_address \n        || msg.sender == timelock_address \n        || frax_pools[msg.sender] == true, \n        \"You are not the owner, the governance timelock, or a pool\");\n    _;\n}",
                            "start": 77
                        },
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "FraxPool.getCollateralPrice() (FraxPool.sol#154-161) compares to a boolean constant:\n\t-collateralPricePaused == true (FraxPool.sol#155)\n",
                            "end": 161,
                            "governanceInfo": null,
                            "id": 155415622,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function getCollateralPrice() public view returns (uint256) {\n    if(collateralPricePaused == true){\n        return pausedPrice;\n    } else {\n        uint256 eth_usd_price = FRAX.eth_usd_price();\n        return eth_usd_price.mul(PRICE_PRECISION).div(collatEthOracle.consult(weth_address, PRICE_PRECISION * (10 ** missing_decimals)));\n    }\n}",
                            "start": 154
                        },
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "FraxPool.collectRedemption() (FraxPool.sol#322-352) compares to a boolean constant:\n\t-sendCollateral == true (FraxPool.sol#349)\n",
                            "end": 352,
                            "governanceInfo": null,
                            "id": 155415623,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function collectRedemption() external {\n    require((lastRedeemed[msg.sender].add(redemption_delay)) <= block.number, \"Must wait for redemption_delay blocks before collecting redemption\");\n    bool sendFXS = false;\n    bool sendCollateral = false;\n    uint FXSAmount;\n    uint CollateralAmount;\n    // Use Checks-Effects-Interactions pattern\n    if(redeemFXSBalances[msg.sender] > 0){\n        FXSAmount = redeemFXSBalances[msg.sender];\n        redeemFXSBalances[msg.sender] = 0;\n        unclaimedPoolFXS = unclaimedPoolFXS.sub(FXSAmount);\n        sendFXS = true;\n    }\n    if(redeemCollateralBalances[msg.sender] > 0){\n        CollateralAmount = redeemCollateralBalances[msg.sender];\n        redeemCollateralBalances[msg.sender] = 0;\n        unclaimedPoolCollateral = unclaimedPoolCollateral.sub(CollateralAmount);\n        sendCollateral = true;\n    }\n    if(sendFXS == true){\n        FXS.transfer(msg.sender, FXSAmount);\n    }\n    if(sendCollateral == true){\n        collateral_token.transfer(msg.sender, CollateralAmount);\n    }\n}",
                            "start": 322
                        },
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "FraxPool.collectRedemption() (FraxPool.sol#322-352) compares to a boolean constant:\n\t-sendFXS == true (FraxPool.sol#346)\n",
                            "end": 352,
                            "governanceInfo": null,
                            "id": 155415624,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function collectRedemption() external {\n    require((lastRedeemed[msg.sender].add(redemption_delay)) <= block.number, \"Must wait for redemption_delay blocks before collecting redemption\");\n    bool sendFXS = false;\n    bool sendCollateral = false;\n    uint FXSAmount;\n    uint CollateralAmount;\n    // Use Checks-Effects-Interactions pattern\n    if(redeemFXSBalances[msg.sender] > 0){\n        FXSAmount = redeemFXSBalances[msg.sender];\n        redeemFXSBalances[msg.sender] = 0;\n        unclaimedPoolFXS = unclaimedPoolFXS.sub(FXSAmount);\n        sendFXS = true;\n    }\n    if(redeemCollateralBalances[msg.sender] > 0){\n        CollateralAmount = redeemCollateralBalances[msg.sender];\n        redeemCollateralBalances[msg.sender] = 0;\n        unclaimedPoolCollateral = unclaimedPoolCollateral.sub(CollateralAmount);\n        sendCollateral = true;\n    }\n    if(sendFXS == true){\n        FXS.transfer(msg.sender, FXSAmount);\n    }\n    if(sendCollateral == true){\n        collateral_token.transfer(msg.sender, CollateralAmount);\n    }\n}",
                            "start": 322
                        },
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "FraxPool.recollateralizeFRAX(uint256,uint256) (FraxPool.sol#359-383) compares to a boolean constant:\n\t-require(bool,string)(recollateralizePaused == false,Recollateralize is paused) (FraxPool.sol#360)\n",
                            "end": 383,
                            "governanceInfo": null,
                            "id": 155415625,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function recollateralizeFRAX(uint256 collateral_amount, uint256 FXS_out_min) external {\n    require(recollateralizePaused == false, \"Recollateralize is paused\");\n    uint256 collateral_amount_d18 = collateral_amount * (10 ** missing_decimals);\n    uint256 fxs_price = FRAX.fxs_price();\n    uint256 frax_total_supply = FRAX.totalSupply();\n    uint256 global_collateral_ratio = FRAX.global_collateral_ratio();\n    uint256 global_collat_value = FRAX.globalCollateralValue();\n    (uint256 collateral_units, uint256 amount_to_recollat) = FraxPoolLibrary.calcRecollateralizeFRAXInner(\n        collateral_amount_d18,\n        getCollateralPrice(),\n        global_collat_value,\n        frax_total_supply,\n        global_collateral_ratio\n    ); \n    uint256 collateral_units_precision = collateral_units.div(10 ** missing_decimals);\n    uint256 fxs_paid_back = amount_to_recollat.mul(uint(1e6).add(bonus_rate)).div(fxs_price);\n    require(FXS_out_min <= fxs_paid_back, \"Slippage limit reached\");\n    collateral_token.transferFrom(msg.sender, address(this), collateral_units_precision);\n    FXS.pool_mint(msg.sender, fxs_paid_back);\n}",
                            "start": 359
                        },
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "FraxPool.buyBackFXS(uint256,uint256) (FraxPool.sol#387-405) compares to a boolean constant:\n\t-require(bool,string)(buyBackPaused == false,Buyback is paused) (FraxPool.sol#388)\n",
                            "end": 405,
                            "governanceInfo": null,
                            "id": 155415626,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function buyBackFXS(uint256 FXS_amount, uint256 COLLATERAL_out_min) external {\n    require(buyBackPaused == false, \"Buyback is paused\");\n    uint256 fxs_price = FRAX.fxs_price();\n    FraxPoolLibrary.BuybackFXS_Params memory input_params = FraxPoolLibrary.BuybackFXS_Params(\n        availableExcessCollatDV(),\n        fxs_price,\n        getCollateralPrice(),\n        FXS_amount\n    );\n    (uint256 collateral_equivalent_d18) = FraxPoolLibrary.calcBuyBackFXS(input_params);\n    uint256 collateral_precision = collateral_equivalent_d18.div(10 ** missing_decimals);\n    require(COLLATERAL_out_min <= collateral_precision, \"Slippage limit reached\");\n    // Give the sender their desired collateral and burn the FXS\n    FXS.pool_burn_from(msg.sender, FXS_amount);\n    collateral_token.transfer(msg.sender, collateral_precision);\n}",
                            "start": 387
                        },
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "FraxPool.toggleCollateralPrice() (FraxPool.sol#429-438) compares to a boolean constant:\n\t-collateralPricePaused == false (FraxPool.sol#432)\n",
                            "end": 438,
                            "governanceInfo": null,
                            "id": 155415627,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function toggleCollateralPrice() external {\n    require(hasRole(COLLATERAL_PRICE_PAUSER, msg.sender));\n    // If pausing, set paused price; else if unpausing, clear pausedPrice\n    if(collateralPricePaused == false){\n        pausedPrice = getCollateralPrice();\n    } else {\n        pausedPrice = 0;\n    }\n    collateralPricePaused = !collateralPricePaused;\n}",
                            "start": 429
                        },
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "FraxPool.notRedeemPaused() (FraxPool.sol#89-92) compares to a boolean constant:\n\t-require(bool,string)(redeemPaused == false,Redeeming is paused) (FraxPool.sol#90)\n",
                            "end": 92,
                            "governanceInfo": null,
                            "id": 155415628,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "modifier notRedeemPaused() {\n    require(redeemPaused == false, \"Redeeming is paused\");\n    _;\n}",
                            "start": 89
                        },
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "FraxPool.notMintPaused() (FraxPool.sol#94-97) compares to a boolean constant:\n\t-require(bool,string)(mintPaused == false,Minting is paused) (FraxPool.sol#95)\n",
                            "end": 97,
                            "governanceInfo": null,
                            "id": 155415629,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "modifier notMintPaused() {\n    require(mintPaused == false, \"Minting is paused\");\n    _;\n}",
                            "start": 94
                        }
                    ],
                    "scwDescription": "This contract compares boolean constants to true or false, which is unnecessary.",
                    "scwId": "170",
                    "scwTitle": "Boolean Constant Comparison"
                },
                {
                    "issues": [],
                    "scwDescription": "No state variables vulnerable through function calls found",
                    "scwId": "172",
                    "scwTitle": null
                },
                {
                    "issues": [
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "Low level call in Address.sendValue(address,uint256) (Address.sol#52-58):\n\t- (success) = recipient.call{value: amount}() (Address.sol#56)\n",
                            "end": 58,
                            "governanceInfo": null,
                            "id": 155415649,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function sendValue(address payable recipient, uint256 amount) internal {\n    require(address(this).balance >= amount, \"Address: insufficient balance\");\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n    (bool success, ) = recipient.call{ value: amount }(\"\");\n    require(success, \"Address: unable to send value, recipient may have reverted\");\n}",
                            "start": 52
                        },
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "Low level call in Address._functionCallWithValue(address,bytes,uint256,string) (Address.sol#118-139):\n\t- (success,returndata) = target.call{value: weiValue}(data) (Address.sol#122)\n",
                            "end": 139,
                            "governanceInfo": null,
                            "id": 155415650,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n    require(isContract(target), \"Address: call to non-contract\");\n    // solhint-disable-next-line avoid-low-level-calls\n    (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n    if (success) {\n        return returndata;\n    } else {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}",
                            "start": 118
                        }
                    ],
                    "scwDescription": "This contract uses low level calls, which may be unsafe.",
                    "scwId": "173",
                    "scwTitle": "Low Level Calls"
                },
                {
                    "issues": [
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "Pragma version^0.6.0 (AccessControl.sol#3) allows old versions\n",
                            "end": 3,
                            "governanceInfo": null,
                            "id": 155415647,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "pragma solidity ^0.6.0;",
                            "start": 3
                        },
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "Pragma version>=0.6.0 (AggregatorV3Interface.sol#2) allows old versions\n",
                            "end": 2,
                            "governanceInfo": null,
                            "id": 155415648,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "pragma solidity >=0.6.0;",
                            "start": 2
                        }
                    ],
                    "scwDescription": "This contract uses an unconventional or very old version of Solidity.",
                    "scwId": "177",
                    "scwTitle": "Incorrect Solidity Version"
                },
                {
                    "issues": [],
                    "scwDescription": "No expensive loops found",
                    "scwId": "179",
                    "scwTitle": null
                },
                {
                    "issues": [
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "Contract FRAXShares uses literals with too many digits:\n\t- genesis_supply = 100000000e18 (FXS.sol#22)\n",
                            "end": 22,
                            "governanceInfo": null,
                            "id": 155415678,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "uint256 public constant genesis_supply = 100000000e18; // 100M is printed upon genesis",
                            "start": 22
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FRAXStablecoin.constructor(string,string,address,address) (Frax.sol#88-109) uses literals with too many digits:\n\t- global_collateral_ratio = 1000000 (Frax.sol#105)\n",
                            "end": 109,
                            "governanceInfo": null,
                            "id": 155415679,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "constructor(\n    string memory _name,\n    string memory _symbol,\n    address _creator_address,\n    address _timelock_address\n) public {\n    name = _name;\n    symbol = _symbol;\n    creator_address = _creator_address;\n    timelock_address = _timelock_address;\n    _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n    DEFAULT_ADMIN_ADDRESS = _msgSender();\n    owner_address = _creator_address;\n    _mint(creator_address, genesis_supply);\n    grantRole(COLLATERAL_RATIO_PAUSER, creator_address);\n    grantRole(COLLATERAL_RATIO_PAUSER, timelock_address);\n    frax_step = 2500; // 6 decimals of precision, equal to 0.25%\n    global_collateral_ratio = 1000000; // Frax system starts off fully collateralized (6 decimals of precision)\n    refresh_cooldown = 3600; // Refresh cooldown period is set to 1 hour (3600 seconds) at genesis\n    price_target = 1000000; // Collateral ratio will adjust according to the $1 price target at genesis\n    price_band = 5000; // Collateral ratio will not adjust if between $0.995 and $1.005 at genesis\n}",
                            "start": 88
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FRAXStablecoin.refreshCollateralRatio() (Frax.sol#178-200) uses literals with too many digits:\n\t- global_collateral_ratio.add(frax_step) >= 1000000 (Frax.sol#192)\n",
                            "end": 200,
                            "governanceInfo": null,
                            "id": 155415680,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function refreshCollateralRatio() public {\n    require(collateral_ratio_paused == false, \"Collateral Ratio has been paused\");\n    uint256 frax_price_cur = frax_price();\n    require(block.timestamp - last_call_time >= refresh_cooldown, \"Must wait for the refresh cooldown since last refresh\");\n    // Step increments are 0.25% (upon genesis, changable by setFraxStep()) \n    if (frax_price_cur > price_target.add(price_band)) { //decrease collateral ratio\n        if(global_collateral_ratio <= frax_step){ //if within a step of 0, go to 0\n            global_collateral_ratio = 0;\n        } else {\n            global_collateral_ratio = global_collateral_ratio.sub(frax_step);\n        }\n    } else if (frax_price_cur < price_target.sub(price_band)) { //increase collateral ratio\n        if(global_collateral_ratio.add(frax_step) >= 1000000){\n            global_collateral_ratio = 1000000; // cap collateral ratio at 1.000000\n        } else {\n            global_collateral_ratio = global_collateral_ratio.add(frax_step);\n        }\n    }\n    last_call_time = block.timestamp; // Set the time of the last expansion\n}",
                            "start": 178
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "Contract FRAXStablecoin uses literals with too many digits:\n\t- genesis_supply = 2000000e18 (Frax.sol#37)\n",
                            "end": 37,
                            "governanceInfo": null,
                            "id": 155415681,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "uint256 public constant genesis_supply = 2000000e18; // 2M FRAX (only for testing, genesis supply will be 5k on Mainnet). This is to help with establishing the Uniswap pools, as they need liquidity",
                            "start": 37
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FraxPool.mintFractionalFRAX(uint256,uint256,uint256) (FraxPool.sol#207-235) uses literals with too many digits:\n\t- require(bool,string)(global_collateral_ratio < COLLATERAL_RATIO_MAX && global_collateral_ratio > 0,Collateral ratio needs to be between .000001 and .999999) (FraxPool.sol#212)\n",
                            "end": 235,
                            "governanceInfo": null,
                            "id": 155415682,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function mintFractionalFRAX(uint256 collateral_amount, uint256 fxs_amount, uint256 FRAX_out_min) external notMintPaused {\n    uint256 frax_price = FRAX.frax_price();\n    uint256 fxs_price = FRAX.fxs_price();\n    uint256 global_collateral_ratio = FRAX.global_collateral_ratio();\n    require(global_collateral_ratio < COLLATERAL_RATIO_MAX && global_collateral_ratio > 0, \"Collateral ratio needs to be between .000001 and .999999\");\n    require(collateral_token.balanceOf(address(this)).sub(unclaimedPoolCollateral).add(collateral_amount) <= pool_ceiling, \"Pool ceiling reached, no more FRAX can be minted with this collateral\");\n    uint256 collateral_amount_d18 = collateral_amount * (10 ** missing_decimals);\n    FraxPoolLibrary.MintFF_Params memory input_params = FraxPoolLibrary.MintFF_Params(\n        minting_fee, \n        fxs_price,\n        frax_price,\n        getCollateralPrice(),\n        fxs_amount,\n        collateral_amount_d18,\n        (collateral_token.balanceOf(address(this)).sub(unclaimedPoolCollateral)),\n        pool_ceiling,\n        global_collateral_ratio\n    );\n    (uint256 mint_amount, uint256 fxs_needed) = FraxPoolLibrary.calcMintFractionalFRAX(input_params);\n    require(FRAX_out_min <= mint_amount, \"Slippage limit reached\");\n    require(fxs_needed <= fxs_amount, \"Not enough FXS inputted\");\n    FXS.pool_burn_from(msg.sender, fxs_needed);\n    collateral_token.transferFrom(msg.sender, address(this), collateral_amount);\n    FRAX.pool_mint(msg.sender, mint_amount);\n}",
                            "start": 207
                        },
                        {
                            "additionalData": [],
                            "confidence": "Medium",
                            "description": "FraxPool.redeemFractionalFRAX(uint256,uint256,uint256) (FraxPool.sol#264-295) uses literals with too many digits:\n\t- require(bool,string)(global_collateral_ratio < COLLATERAL_RATIO_MAX && global_collateral_ratio > 0,Collateral ratio needs to be between .000001 and .999999) (FraxPool.sol#268)\n",
                            "end": 295,
                            "governanceInfo": null,
                            "id": 155415683,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function redeemFractionalFRAX(uint256 FRAX_amount, uint256 FXS_out_min, uint256 COLLATERAL_out_min) external notRedeemPaused {\n    uint256 fxs_price = FRAX.fxs_price();\n    uint256 global_collateral_ratio = FRAX.global_collateral_ratio();\n    require(global_collateral_ratio < COLLATERAL_RATIO_MAX && global_collateral_ratio > 0, \"Collateral ratio needs to be between .000001 and .999999\");\n    uint256 col_price_usd = getCollateralPrice();\n    uint256 FRAX_amount_post_fee = FRAX_amount.sub((FRAX_amount.mul(redemption_fee)).div(PRICE_PRECISION));\n    uint256 fxs_dollar_value_d18 = FRAX_amount_post_fee.sub(FRAX_amount_post_fee.mul(global_collateral_ratio).div(PRICE_PRECISION));\n    uint256 fxs_amount = fxs_dollar_value_d18.mul(PRICE_PRECISION).div(fxs_price);\n    // Need to adjust for decimals of collateral\n    uint256 FRAX_amount_precision = FRAX_amount_post_fee.div(10 ** missing_decimals);\n    uint256 collateral_dollar_value = FRAX_amount_precision.mul(global_collateral_ratio).div(PRICE_PRECISION);\n    uint256 collateral_amount = collateral_dollar_value.mul(PRICE_PRECISION).div(col_price_usd);\n    redeemCollateralBalances[msg.sender] = redeemCollateralBalances[msg.sender].add(collateral_amount);\n    unclaimedPoolCollateral = unclaimedPoolCollateral.add(collateral_amount);\n    redeemFXSBalances[msg.sender] = redeemFXSBalances[msg.sender].add(fxs_amount);\n    unclaimedPoolFXS = unclaimedPoolFXS.add(fxs_amount);\n    lastRedeemed[msg.sender] = block.number;\n    require(collateral_amount <= collateral_token.balanceOf(address(this)).sub(unclaimedPoolCollateral), \"Not enough collateral in pool\");\n    require(COLLATERAL_out_min <= collateral_amount, \"Slippage limit reached [collateral]\");\n    require(FXS_out_min <= fxs_amount, \"Slippage limit reached [FXS]\");\n    // Move all external functions to the end\n    FRAX.pool_burn_from(msg.sender, FRAX_amount);\n    FXS.pool_mint(address(this), fxs_amount);\n}",
                            "start": 264
                        }
                    ],
                    "scwDescription": "The numeric notation used in this contract is unconventional, possibly worsening the reading/debugging experience.",
                    "scwId": "182",
                    "scwTitle": "Numeric Notation Best Practices"
                },
                {
                    "issues": [
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "FRAXShares.FRAXStablecoinAdd (FXS.sol#20) should be constant\n",
                            "end": 20,
                            "governanceInfo": null,
                            "id": 155415630,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "address public FRAXStablecoinAdd;",
                            "start": 20
                        }
                    ],
                    "scwDescription": "Some state variables in this contract should be declared as constant.",
                    "scwId": "183",
                    "scwTitle": "State Variables Should be Declared Constant"
                },
                {
                    "issues": [
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "mint(address,uint256) should be declared external:\n\t- FRAXShares.mint(address,uint256) (FXS.sol#99-101)\n",
                            "end": 101,
                            "governanceInfo": null,
                            "id": 155415643,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function mint(address to, uint256 amount) public onlyPools {\n    _mint(to, amount);\n}",
                            "start": 99
                        },
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "transfer(address,uint256) should be declared external:\n\t- ERC20Custom.transfer(address,uint256) (ERC20Custom.sol#67-70)\n\t- FRAXShares.transfer(address,uint256) (FXS.sol#137-145)\n",
                            "end": 70,
                            "governanceInfo": null,
                            "id": 155415644,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n    _transfer(_msgSender(), recipient, amount);\n    return true;\n}",
                            "start": 67
                        },
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "transferFrom(address,address,uint256) should be declared external:\n\t- ERC20Custom.transferFrom(address,address,uint256) (ERC20Custom.sol#103-107)\n\t- FRAXShares.transferFrom(address,address,uint256) (FXS.sol#147-157)\n",
                            "end": 107,
                            "governanceInfo": null,
                            "id": 155415645,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n    _transfer(sender, recipient, amount);\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n    return true;\n}",
                            "start": 103
                        },
                        {
                            "additionalData": [],
                            "confidence": "High",
                            "description": "getPriorVotes(address,uint256) should be declared external:\n\t- FRAXShares.getPriorVotes(address,uint256) (FXS.sol#178-210)\n",
                            "end": 210,
                            "governanceInfo": null,
                            "id": 155415646,
                            "impact": "Informational",
                            "severityChanges": [],
                            "snippet": "function getPriorVotes(address account, uint blockNumber) public view returns (uint96) {\n    require(blockNumber < block.number, \"FXS::getPriorVotes: not yet determined\");\n    uint32 nCheckpoints = numCheckpoints[account];\n    if (nCheckpoints == 0) {\n        return 0;\n    }\n    // First check most recent balance\n    if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\n        return checkpoints[account][nCheckpoints - 1].votes;\n    }\n    // Next check implicit zero balance\n    if (checkpoints[account][0].fromBlock > blockNumber) {\n        return 0;\n    }\n    uint32 lower = 0;\n    uint32 upper = nCheckpoints - 1;\n    while (upper > lower) {\n        uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n        Checkpoint memory cp = checkpoints[account][center];\n        if (cp.fromBlock == blockNumber) {\n            return cp.votes;\n        } else if (cp.fromBlock < blockNumber) {\n            lower = center;\n        } else {\n            upper = center - 1;\n        }\n    }\n    return checkpoints[account][lower].votes;\n}",
                            "start": 178
                        }
                    ],
                    "scwDescription": "Some functions in this contract should be declared as external in order to save gas.",
                    "scwId": "184",
                    "scwTitle": "Public Functions Should be Declared External"
                },
                {
                    "issues": [],
                    "scwDescription": "No vulnerable payable functions found",
                    "scwId": "224",
                    "scwTitle": null
                },
                {
                    "issues": [],
                    "scwDescription": "No vulnerable message values found",
                    "scwId": "225",
                    "scwTitle": null
                }
            ],
            "governance": {
                "contractOwners": [
                    {
                        "governance": null,
                        "impact": "Medium",
                        "modifiable": true,
                        "multisig": {
                            "multisigOwners": [
                                "0x6933BCC3e96f1C4d2cb73Cb391d854b18Ab7A4F2",
                                "0xf4E1d185666a624099298FcC42C50ba662DC7e52",
                                "0x17e06ce6914E3969f7BD37D8b2a563890cA1c96e",
                                "0x5997290D9aE2F8FCCCbD10313CbBDC917687997a",
                                "0x05FB8eC3C41da95b26fCb85503DaF8B89B89A935"
                            ],
                            "threshold": 3,
                            "transactionCount": 5227
                        },
                        "owner": "0xb1748c79709f4ba2dd82834b8c82d4a505003f27",
                        "timelock": null,
                        "timelockDelay": null,
                        "type": "2"
                    }
                ],
                "issueOwners": [
                    {
                        "owners": [
                            {
                                "governance": null,
                                "impact": "High",
                                "modifiable": false,
                                "multisig": null,
                                "owner": "",
                                "timelock": null,
                                "timelockDelay": null,
                                "type": "7"
                            }
                        ],
                        "scwId": "186"
                    }
                ],
                "proxyOwners": [],
                "visibleOwner": "0xb1748c79709f4ba2dd82834b8c82d4a505003f27"
            },
            "inProgress": false,
            "initialFunder": "0x69863cdd8a25bae9a57271f7a29a76764da87f1a",
            "isProxyImplementation": false,
            "logo": "",
            "name": "FRAXShares(Frax Share)",
            "network": 1,
            "pairInfo": null,
            "projectFullName": "Frax Share (FXS)",
            "projectName": "Stablecoin",
            "protocol": "erc20",
            "proxyContractAddress": null,
            "proxyData": null,
            "rektLink": null,
            "sourceCodeLink": "https://scan-results.de.fi/0x3432b6a60d23ca0dfca7761b7ab56459d9c964d0_1_src.json",
            "stats": {
                "percentage": 100,
                "scammed": false
            },
            "whitelisted": true
        }
    }
}