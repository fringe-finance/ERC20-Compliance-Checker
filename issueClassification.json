{
    "categories": {
        "active transfer constraints": {
            "active": true,
            "description": "constraints are placed on token transfers, potentially resulting in seizure of tokens"
        },
        "admin inflation": {
            "active": false,
            "description": "erc20 token supply can suddenly be increased"
        },
        "allowance bugs": {
            "active": false,
            "description": "unexpected allowance behaviour resulting in failed txs when interacting with plp"
        },
        "balance variability": {
            "active": true,
            "description": "account balance is not deterministic from send/receive amounts"
        },
        "malice heuristics": {
            "active": false,
            "description": "heuristics point to owner or contracts being malicious"
        },
        "potential coarse transfer constraints": {
            "active": false,
            "description": "constraints are able to be placed on all token holders, potentially resulting in seizure of tokens"
        },
        "potential granular transfer constraints": {
            "active": false,
            "description": "constraints are able to be placed on specific token holders, potentially resulting in seizure of tokens"
        },
        "theft or inflation": {
            "active": true,
            "description": "send/receive works in ways which facilitates theft or inflation"
        },
        "token vuln": {
            "active": true,
            "description": "erc20 contract itself is at risk of an attack"
        },
        "undetermined": {
            "active": true,
            "description": "as of yet unclassified issues"
        },
        "unpredictable logic": {
            "active": false,
            "description": "contract behaviour is hard to predict/verify or can change"
        },
        "view inaccuracies": {
            "active": true,
            "description": "erc20 view functions do not accurately reflect erc20 contract state"
        }
    },
    "issues": {
        "10003": {
            "class": "malice heuristics",
            "description": "The contract's deployer used a mixer to fund their wallet. This may be an indication of an intent to rugpull or avoid responsibility."
        },
        "10004": {
            "class": "",
            "description": "This token has been or can be airdropped - while not inherently a security risk, users should watch out for fake airdrops or scam sites linked to this token."
        },
        "10025": {
            "class": "",
            "description": "Contract faces excessive revocations, raising concerns about functionality and security."
        },
        "10028": {
            "class": "",
            "description": "Our algorithms have identified a sudden and massive withdrawal from the liquidity pool, which may impact the ability to sell the token."
        },
        "107": {
            "class": "",
            "description": "Funds in this contract may be vulnerable to a hack through a reentrancy exploit."
        },
        "150": {
            "class": "",
            "description": "Funds sent to this contract can never be withdrawn."
        },
        "185": {
            "class": "unpredictable logic",
            "description": "This contract's code has not been publicly verified."
        },
        "186": {
            "class": "",
            "description": "A large amount of this token can be minted by a private wallet or contract."
        },
        "189": {
            "class": "potential coarse transfer constraints",
            "description": "Token transfers can be paused, preventing swapping or selling."
        },
        "193": {
            "class": "unpredictable logic",
            "description": "This contract can be upgraded, changing its functionality."
        },
        "204-a": {
            "class": "unpredictable logic",
            "description": "This contract may not function as intended due to an incorrect ERC20 interface implementation."
        },
        "208": {
            "class": "potential granular transfer constraints",
            "description": "Wallets can be blacklisted from being able to transfer, swap or sell this token."
        },
        "209": {
            "class": "balance variability",
            "description": "A fee is charged upon transfering this token (up to 100%)."
        },
        "210-b": {
            "class": "unpredictable logic",
            "description": "The contract contains external calls which cannot be analyzed by the scanner, and could be potentially dangerous. Please use caution when using this contract."
        },
        "211": {
            "class": "active transfer constraints",
            "description": "The max/min amount of token transferred can be limited."
        },
        "216-a": {
            "class": "",
            "description": "Funds in this contract may be vulnerable to being drained by its owner through an approval exploit."
        },
        "220": {
            "class": "potential granular transfer constraints",
            "description": "The contract owner is able to control all token holders' balances."
        },
        "230": {
            "class": "",
            "description": "The contract's owner can be changed by anyone."
        },
        "233": {
            "class": "admin inflation",
            "description": "The token's maximum supply can be adjusted."
        },
        "237": {
            "class": "potential granular transfer constraints",
            "description": "Detected whitelisting feature enables unique users to bypass restrictions, potentially raising security and integrity concerns."
        },
        "242": {
            "class": "",
            "description": "Unprotected contract initializer, vulnerable to re-execution, immediate action needed for security."
        },
        "testAddressZeroHasNoToken": {
            "class": "",
            "description": "The zero address HAS some token/s from the contract."
        },
        "testBalanceDoesNotOverflowByMinting": {
            "class": "undetermined",
            "description": "The contract owner can control balance by minting numerous tokens to an account (via `mint(address,uint256)` or `mintToken(address,uint256)` or `issue(address,uint256)`),  overflowing its balance to a small figure."
        },
        "testBalanceOfCaller": {
            "class": "view inaccuracies",
            "description": "A `msg.sender` CANNOT retrieve his/her own balance."
        },
        "testBalanceOfNonCaller": {
            "class": "view inaccuracies",
            "description": "A `msg.sender` CANNOT retrieve balance of an address different from his/hers."
        },
        "testBurningUpdatesTotalSupply": {
            "class": "",
            "description": "After burning some token (via `burn(uint256)` or `burnToken(uint256)`), the total supply was not updated correctly."
        },
        "testCanApproveMoreThanBalance": {
            "class": "",
            "description": "The token DOES NOT ALLOW tokenApprover to call `approve` of an amount higher than her balance."
        },
        "testCannotApprovePositiveAmountToZeroAddress": {
            "class": "",
            "description": "A successful call of `approve` of an amount to the zero address IS allowed."
        },
        "testCannotTransferFromMoreThanAllowanceLowerThanBalance": {
            "class": "theft or inflation",
            "description": "A tokenReceiver CAN call `transferFrom` of an amount more than her allowance from the tokenSender."
        },
        "testCannotTransferFromMoreThanBalanceButLowerThanAllowance": {
            "class": "theft or inflation",
            "description": "A tokenReceiver CAN call `transferFrom` of an amount more than the tokenSender's balance."
        },
        "testCannotTransferMoreThanBalance": {
            "class": "theft or inflation",
            "description": "A tokenSender (which is also the `msg.sender`) CAN call `transfer` of an amount more than his balance. "
        },
        "testCorrectOverwriteApprovePositiveToPositive": {
            "class": "",
            "description": "Consecutive calls of `approve` function of positive-to-positive amounts can be called  but the allowance is set to the wrong amount after the second call."
        },
        "testCorrectOverwriteApprovePositiveToZero": {
            "class": "",
            "description": "Consecutive calls of `approve` function of positive-to-zero amounts CANNOT be called OR the allowance is set to the wrong amount after the second call.    "
        },
        "testCorrectOverwriteApproveZeroToPositive": {
            "class": "",
            "description": "Consecutive calls of `approve` function of zero-to-positive amounts CANNOT be called OR the allowance is set to the wrong amount after the second call."
        },
        "testDealIntendedTokensToDummyUsers": {
            "class": "undetermined",
            "description": "There is an issue when dealing the intended amount of tokens to dummy users for interacting with the contract. This could be due to issues with  (a) calling of the `transfer` function by the top token holder, or  (b) the presence of fees from the `transfer` function."
        },
        "testDecreaseAllowanceBehaviorInexact": {
            "class": "",
            "description": "A `decreaseAllowance` call REVERTS if there's not enough allowance to decrease  or DOES NOT TURN the allowance to zero even though the current allowance is smaller than the amount to decrease."
        },
        "testDecreaseAllowanceDoubleSpend": {
            "class": "",
            "description": "The `decreaseAllowance` function ALLOWS allowance to be double-spent, i.e.,   Alice CANNOT decrease her allowance for Bob by the correct amount even if Bob tries to front-run her by  calling `transferFrom` call right before her call."
        },
        "testDecreaseAllowanceGtExpected": {
            "class": "",
            "description": "A successful `decreaseAllowance` call of a positive amount DOES NOT DECREASE the allowance by MORE than the said amount."
        },
        "testDecreaseAllowanceLtExpected": {
            "class": "",
            "description": "A successful `decreaseAllowance` call of a positive amount DOES NOT DECREASE the allowance by LESS than the said amount."
        },
        "testDefaultOverwriteApprove": {
            "class": "",
            "description": ""
        },
        "testFeeTakingTransfer": {
            "class": "balance variability",
            "description": ""
        },
        "testFeeTakingTransferFrom": {
            "class": "balance variability",
            "description": ""
        },
        "testFeeTakingTransferFromPotential": {
            "class": "balance variability",
            "description": "The `transferFrom` function HAS the potential to take fees."
        },
        "testFeeTakingTransferFromPresent": {
            "class": "balance variability",
            "description": "The `transfer` function TAKES fees at test execution time."
        },
        "testFeeTakingTransferPotential": {
            "class": "balance variability",
            "description": "The `transfer` function HAS the potential to take fees."
        },
        "testFeeTakingTransferPresent": {
            "class": "balance variability",
            "description": "The `transfer` function TAKES fees at test execution time."
        },
        "testIncreaseAllowanceDoubleSpend": {
            "class": "",
            "description": "The `increaseAllowance` function ALLOWS allowance to be double-spent, i.e.,   Alice CANNOT increase her allowance for Bob by the correct amount even if Bob tries to front-run her by  calling `transferFrom` call right before her call."
        },
        "testIncreaseAllowanceGtExpected": {
            "class": "",
            "description": "A successful `increaseAllowance` call of a positive amount DOES NOT INCREASE the allowance by MORE than the said amount."
        },
        "testIncreaseAllowanceLtExpected": {
            "class": "",
            "description": "A successful `increaseAllowance` call of a positive amount DOES NOT INCREASE the allowance by LESS than the said amount."
        },
        "testInfiniteApprovalConstant": {
            "class": "",
            "description": "The token MAY NOT HAVE the infinite approval property. That is,  if the approval is set to MAX_UINT256 and a `transfer` is called, the allowance  may decrease by the transferred amount."
        },
        "testInfiniteApprovalNotConstant": {
            "class": "",
            "description": "The token MAY support infinite approval. That is, if the approval is set to MAX_UINT256 and a `transfer` is called, the allowance may not decrease  by the transferred amount."
        },
        "testMaintainsApprovalLowerThanBalance": {
            "class": "",
            "description": "EITHER the token ALLOWS tokenApprover to call `approve` of an amount higher than her  balance OR the tokenApprover DOES NOT need to maintain at least the said amount in her balance before she  can make a `transfer` call to an account other than the tokenApprovee."
        },
        "testMintingToZeroAddressShouldFail": {
            "class": "undetermined",
            "description": "It was possible to mint tokens (via `mint(address,uint256)` or `mintToken(address,uint256)` or `issue(address,uint256)`) to the zero address."
        },
        "testMintingUpdatesBalance": {
            "class": "undetermined",
            "description": "After minting some token (via `mint(address,uint256)` or `mintToken(address,uint256)` or `issue(address,uint256)`), the user balance was not updated correctly."
        },
        "testMintingUpdatesTotalSupply": {
            "class": "undetermined",
            "description": "After minting some token (via `mint(address,uint256)` or `mintToken(address,uint256)` or `issue(address,uint256)`), the total supply was not updated correctly."
        },
        "testMintingZeroShouldNotChangeBalance": {
            "class": "undetermined",
            "description": "By minting zero token (via `mint(address,uint256)` or `mintToken(address,uint256)` or `issue(address,uint256)`), the balance of the target address changed."
        },
        "testMintingZeroShouldNotChangeTotalSupply": {
            "class": "undetermined",
            "description": "By minting zero token (via `mint(address,uint256)` or `mintToken(address,uint256)` or `issue(address,uint256)`), the total supply changed."
        },
        "testMultipleTransferFromCannotExceedAllowance": {
            "class": "undetermined",
            "description": "Multiple calls of `transferFrom` ARE allowed even though the allowance has reached zero."
        },
        "testMultipleTransferFromExceedAllowance": {
            "class": "theft or inflation",
            "description": "Multiple calls of `transferFrom` ARE allowed even though the allowance has reached zero."
        },
        "testNoApprovalCannotTransferFrom": {
            "class": "theft or inflation",
            "description": "A tokenReceiver CAN be able to call `transferFrom` of a positive amount from an tokenSender even though the tokenSender did not approve the tokenReceiver previously."
        },
        "testNoExcessByMintingViaOverflow": {
            "class": "undetermined",
            "description": "The contract owner can bring about an overflow and issue random amounts of tokens (via `mint(address,uint256)` or `mintToken(address,uint256)` or `issue(address,uint256)`)  by passing a great value and pass the check of max minting value."
        },
        "testNoSelfApprovalCannotSelfTransferFrom": {
            "class": "",
            "description": "A `msg.sender` CAN call `transferFrom` of a positive amount from his/her own acount to any tokenReceiver even though the `msg.sender` did not approve him/herself prior to the call."
        },
        "testOverwriteApprovePositiveToPositive": {
            "class": "",
            "description": "Consecutive calls of `approve` function of positive-to-positive amounts CAN be called."
        },
        "testPositiveApprovalEventEmission": {
            "class": "",
            "description": "A successful `approve` call of positive amount does NOT emit the `Approval` event correctly."
        },
        "testPositiveApproveAllowsPositiveTransferFrom": {
            "class": "allowance bugs",
            "description": "After a tokenApprover approves a tokenApprovee some positive amount via an `approve` call, any positive amount up to the said amount is NOT transferable  by tokenApprovee via a `transferFrom` call, provided a sufficient balance of tokenApprover."
        },
        "testPositiveApproveAllowsZeroTransferFrom": {
            "class": "",
            "description": "After a tokenApprover approves a tokenApprovee some positive amount via an `approve` call, zero amount is NOT transferable  by tokenApprovee via a `transferFrom` call, provided a sufficient balance of tokenApprover."
        },
        "testPositiveApproveLeadsToAllowance": {
            "class": "allowance bugs",
            "description": "Positive approved amount is NOT reflected in the allowance correctly."
        },
        "testPositiveDecreaseAllowanceAllowsPositiveTransferFrom": {
            "class": "allowance bugs",
            "description": "After a tokenApprover decreases the allowance of a tokenApprovee by some positive amount via a  `decreaseAllowance` call, any amount up to the decreased allowance CANNOT be transferred by tokenApprovee,  provided a sufficient balance of tokenApprover."
        },
        "testPositiveIncreaseAllowanceAllowsPositiveTransferFrom": {
            "class": "allowance bugs",
            "description": "After a tokenApprover increases the allowance of a tokenApprovee by some positive amount  via a `increaseAllowance` call, some amount up to the increased allowance CANNOT be transferred by  tokenApprovee, provided a sufficient balance of tokenApprover."
        },
        "testPositiveMultipleTransfer": {
            "class": "active transfer constraints",
            "description": "Multiple `transfer` calls of positive amounts are NOT ALLOWED even though the sum of the transferred amounts is less than or equal to the tokenSender's balance."
        },
        "testPositiveMultipleTransferFrom": {
            "class": "allowance bugs",
            "description": "Multiple `transferFrom` calls of positive amounts are NOT ALLOWED even though the sum of the transferred amounts is  less than or equal to the tokenSender's balance and approvals are given by the tokenSender."
        },
        "testPositiveSelfApprove": {
            "class": "",
            "description": "Self approval of zero amount is NOT ALLOWED."
        },
        "testPositiveSelfApproveTransferFrom": {
            "class": "",
            "description": "Self approval and call of `transferFrom` from its own account of positive amount is NOT ALLOWED."
        },
        "testPositiveSelfIncreaseAllowanceTransferFrom": {
            "class": "",
            "description": "Self `increaseAllowance` call, followed by a `transferFrom` call of some positive amount is NOT ALLOWED."
        },
        "testPositiveSelfTransfer": {
            "class": "balance variability",
            "description": "Self `transfer` call of positive amount is NOT ALLOWED or it MODIFIED the balance."
        },
        "testPositiveTotalTransferFromToOther": {
            "class": "allowance bugs",
            "description": "A tokenReceiver CANNOT call `transferFrom` of the tokenSender's total balance amount even though tokenSender has approved that."
        },
        "testPositiveTotalTransferToOther": {
            "class": "active transfer constraints",
            "description": "A `msg.sender` CANNOT call `transfer` of her total balance amount to a tokenReceiver or the balances were not modified as expected."
        },
        "testPositiveTransferEventEmission": {
            "class": "",
            "description": "A successful `transfer` call of positive amount does NOT emit the Transfer event correctly."
        },
        "testPositiveTransferFromEventEmission": {
            "class": "",
            "description": "A successful `transferFrom` call of positive amount does NOT emit Transfer event correctly."
        },
        "testPositiveTransferFromToZeroShouldRevert": {
            "class": "",
            "description": "A `transferFrom` call of a positive amount to the zero address DOES NOT revert."
        },
        "testPositiveTransferToZeroShouldRevert": {
            "class": "",
            "description": "A `transfer` call of a positive amount to the zero address DOES NOT revert."
        },
        "testRecommendedOverwriteApprove": {
            "class": "",
            "description": ""
        },
        "testRevertsIfApprovalGreaterThanBalance": {
            "class": "",
            "description": "The token DOES NOT REVERT if a tokenApprover approves a tokenApprovee more than its balance."
        },
        "testRevertsOnInfiniteApproval": {
            "class": "",
            "description": "The token DOES NOT REVERT if approval is set to MAX_UINT256."
        },
        "testTotalSupplyConstantAfterTransfer": {
            "class": "balance variability",
            "description": "The contract's `totalSupply` variable IS altered after `transfer` is called."
        },
        "testTotalSupplyConstantAfterTransferFrom": {
            "class": "balance variability",
            "description": "The contract's `totalSupply` variable IS altered after `transferFrom` is called."
        },
        "testTotalSupplyDoesNotOverflowByMinting": {
            "class": "undetermined",
            "description": "An overflow happened with variable totalSupply when the sum of tokens changed via minting (via `mint(address,uint256)` or `mintToken(address,uint256)` or `issue(address,uint256)`)."
        },
        "testTransferAreNotPossibleWhenPaused": {
            "class": "potential coarse transfer constraints",
            "description": "After pausing the token, a transfer could happen or the balance of the tokenSender or the tokenReceiver changed unexpectedely."
        },
        "testTransferDoesNotUpdateOthersBalances": {
            "class": "balance variability",
            "description": "A successful call of `transfer` UPDATES the balance of users who are neither the tokenSender nor the tokenReceiver."
        },
        "testTransferFromAreNotPossibleWhenPaused": {
            "class": "potential coarse transfer constraints",
            "description": "After pausing the token, a transferFrom could happen or the balance of the tokenSender or the tokenReceiver changed unexpectedely."
        },
        "testTransferFromDecreaseAllowanceAsExpected": {
            "class": "",
            "description": "A successful `transferFrom` of any positive amount DOES NOT decrease the allowance of the tokenSender by the transferred amount."
        },
        "testTransferFromDecreaseAllowanceGtExpected": {
            "class": "",
            "description": "A successful `transferFrom` call of a positive amount DOES NOT DECREASE the allowance of the tokenSender by MORE than the transferred amount."
        },
        "testTransferFromDecreaseAllowanceLtExpected": {
            "class": "",
            "description": "A successful `transferFrom` call of a positive amount DOES NOT DECREASE the allowance of the tokenSender by LESS than the transferred amount."
        },
        "testTransferFromDoesNotUpdateOthersBalances": {
            "class": "balance variability",
            "description": "A successful call of `transferFrom` UPDATES the balance of users who are neither the tokenSender nor the tokenReceiver."
        },
        "testUserBalanceInitialized": {
            "class": "view inaccuracies",
            "description": "A successful `balanceOf(account)` call does NOT return balance of `account` correctly after two dummy users' balances are initialized."
        },
        "testZeroAddressCannotApprovePositiveAmount": {
            "class": "",
            "description": "A `approve` call of some positive amount DOES NOT revert if the tokenSender is the zero address."
        },
        "testZeroAddressCannotTransferPositiveAmount": {
            "class": "",
            "description": "A `transfer` call of some positive amount DOES NOT revert if the tokenSender is the zero address."
        },
        "testZeroApprovalEventEmission": {
            "class": "",
            "description": "A successful `approve` call of zero amount does NOT emit the `Approval` event correctly."
        },
        "testZeroApproveLeadsToAllowance": {
            "class": "view inaccuracies",
            "description": "Zero approved amount is NOT reflected in the allowance correctly."
        },
        "testZeroMultipleTransfer": {
            "class": "",
            "description": "Multiple calls of `transfer` of zero amount are NOT ALLOWED.  "
        },
        "testZeroMultipleTransferFrom": {
            "class": "",
            "description": "Multiple calls of `transferFrom` of zero amount are NOT ALLOWED. "
        },
        "testZeroSelfApprove": {
            "class": "",
            "description": "Self approval of zero amount is NOT ALLOWED."
        },
        "testZeroSelfApproveTransferFrom": {
            "class": "",
            "description": "Self approval and call of `transferFrom` from its own account of zero amount is NOT ALLOWED."
        },
        "testZeroSelfTransfer": {
            "class": "",
            "description": "Self `transfer` call of zero amount is NOT ALLOWED or it MODIFIES the balance."
        },
        "testZeroTotalTransferFromToOther": {
            "class": "allowance bugs",
            "description": "A tokenReceiver CANNOT call `transferFrom` of the tokenSender's total balance amount of zero."
        },
        "testZeroTotalTransferToOther": {
            "class": "",
            "description": "A `msg.sender` CANNOT call `transfer` of her total balance amount of zero to a tokenReceiver or the balances were modified."
        },
        "testZeroTransferFromByOtherEmitsEvent": {
            "class": "",
            "description": "A successful `transferFrom` call of zero amount by any user other than the tokenSender, from and to different accounts,  does NOT emit a Transfer event correctly."
        },
        "testZeroTransferFromByOtherFromAndToSameAccountPossible": {
            "class": "undetermined",
            "description": "A successful `transferFrom` call of zero amount by any user other than the tokenSender, from and to the same account, is NOT possible."
        },
        "testZeroTransferFromByOtherPossible": {
            "class": "",
            "description": ""
        },
        "testZeroTransferFromByOtherPossibleFromAndToDifferentAccounts": {
            "class": "undetermined",
            "description": "A successful `transferFrom` call of zero amount by any user other than the tokenSender, from and to different accounts, is NOT possible."
        },
        "testZeroTransferFromByOtherToSameAccountEmitsEvent": {
            "class": "",
            "description": "A successful `transferFrom` call of zero amount by any user other than the tokenSender does NOT emit a Transfer event correctly."
        },
        "testZeroTransferFromByOtherToSelfPossible": {
            "class": "",
            "description": "A successful `transferFrom` call of zero amount by any user other than the tokenSender to the tokenSender is NOT possible."
        },
        "testZeroTransferFromBySelfEmitsEvent": {
            "class": "",
            "description": ""
        },
        "testZeroTransferFromBySelfPossible": {
            "class": "",
            "description": "A successful `transferFrom` call of zero amount by the tokenSender herself is NOT possible."
        },
        "testZeroTransferFromBySelfToSelfEmitsEvent": {
            "class": "",
            "description": "A successful `transferFrom` call of zero amount by the tokenSender herself does NOT emit a Transfer event correctly."
        },
        "testZeroTransferFromBySelfToSelfPossible": {
            "class": "",
            "description": ""
        },
        "testZeroTransferFromBySelfToSomeoneEmitsEvent": {
            "class": "",
            "description": "A successful `transferFrom` call of zero amount by the tokenSender herself does NOT emit a Transfer event correctly."
        },
        "testZeroTransferFromToZeroShouldRevert": {
            "class": "",
            "description": "A `transferFrom` call of zero amount to the zero address DOES NOT revert."
        },
        "testZeroTransferPossible": {
            "class": "",
            "description": ""
        },
        "testZeroTransferToOthersEmitsEvent": {
            "class": "",
            "description": "A successful `transfer` call of zero amount to another account does NOT emit the Transfer event correctly."
        },
        "testZeroTransferToOthersPossible": {
            "class": "",
            "description": "A successful `transfer` call of zero amount to another account is NOT be possible."
        },
        "testZeroTransferToSelfEmitsEvent": {
            "class": "",
            "description": "A successful `transfer` call of zero amount to self does NOT emit the Transfer event correctly."
        },
        "testZeroTransferToSelfPossible": {
            "class": "",
            "description": "A successful `transfer` call of zero amount to self is NOT possible."
        },
        "testZeroTransferToZeroShouldRevert": {
            "class": "",
            "description": "A `transfer` call of zero amount to the zero address DOES NOT revert."
        }
    }
}